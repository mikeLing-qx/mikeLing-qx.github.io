<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SPI on lexqinMike</title>
        <link>https://mikeLing-qx.github.io/categories/spi/</link>
        <description>Recent content in SPI on lexqinMike</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>LexqinMike</copyright>
        <lastBuildDate>Thu, 03 Nov 2022 15:21:43 +0800</lastBuildDate><atom:link href="https://mikeLing-qx.github.io/categories/spi/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>JavaSPI</title>
        <link>https://mikeLing-qx.github.io/p/javaspi/</link>
        <pubDate>Thu, 03 Nov 2022 15:21:43 +0800</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/javaspi/</guid>
        <description>&lt;h1 id=&#34;1-概念&#34;&gt;1. 概念
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Service: 是一个==公开的接口或抽象类==, 定义了一个抽象的功能模块&lt;/li&gt;
&lt;li&gt;Service Provider:  是service 接口的一个==实现类==&lt;/li&gt;
&lt;li&gt;Service Loder : SPI 机制中的核心组件, 负责==在运行时== **==发现并加载== **==Service Provider==&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;11-三大规范要素&#34;&gt;1.1 三大规范要素
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;==规范的配置文件==&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219113357503.png&#34;
	width=&#34;888&#34;
	height=&#34;185&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219113357503&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;480&#34;
		data-flex-basis=&#34;1152px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;==service provider 类必须具备无参的默认构造方法==&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219114806149.png&#34;
	width=&#34;433&#34;
	height=&#34;83&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219114806149&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;521&#34;
		data-flex-basis=&#34;1252px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;==保证能加载到配置文件和 Service provider 类==&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219115212141.png&#34;
	width=&#34;826&#34;
	height=&#34;237&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219115212141&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;348&#34;
		data-flex-basis=&#34;836px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-spi-运行流程&#34;&gt;2. SPI 运行流程
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219112335901.png&#34;
	width=&#34;911&#34;
	height=&#34;430&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219112335901&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;211&#34;
		data-flex-basis=&#34;508px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;它的作用是什么, 解决了什么?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供了一种==组件发现和注册的方式==,  可以用于实现各种插件, 或者灵活替换框架所使用的组件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要实现一个SPI 应用, 要怎么做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背后的设计思想是什么? 得到什么启示&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;面向接口 + 配置文件 + 反射技术
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3-jdbc&#34;&gt;3. JDBC
&lt;/h1&gt;&lt;p&gt;SPI 出现前是如何使用的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219113109448.png&#34;
	width=&#34;566&#34;
	height=&#34;408&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219113109448&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用SPI 之后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219113215308.png&#34;
	width=&#34;587&#34;
	height=&#34;411&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219113215308&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;JDBC 实现原理:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ClassLoder 加载类, getResource/ getResources, 可以根据指定的路径, 读取classpath 中对应的文件, 我们可以用它来读取厂商放在Jar 包中的配置文件, 需要约定好配置文件的路径和格式&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4-spi-与-springboot-自动配置&#34;&gt;4. SPI 与 Springboot 自动配置
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219120201938.png&#34;
	width=&#34;1007&#34;
	height=&#34;503&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219120201938&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/javaspi/images/image-20221219120656961.png&#34;
	width=&#34;985&#34;
	height=&#34;457&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221219120656961&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;517px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
