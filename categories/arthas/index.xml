<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Arthas on lexqinMike</title>
        <link>https://mikeLing-qx.github.io/categories/arthas/</link>
        <description>Recent content in Arthas on lexqinMike</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>LexqinMike</copyright>
        <lastBuildDate>Sun, 22 Aug 2021 16:04:14 +0800</lastBuildDate><atom:link href="https://mikeLing-qx.github.io/categories/arthas/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Arthas</title>
        <link>https://mikeLing-qx.github.io/p/arthas/</link>
        <pubDate>Sun, 22 Aug 2021 16:04:14 +0800</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/arthas/</guid>
        <description>&lt;h1 id=&#34;arthas-使用入门&#34;&gt;Arthas 使用入门
&lt;/h1&gt;&lt;h2 id=&#34;1-安装启动&#34;&gt;1 安装启动
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载并启动&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;curl -O https://alibaba.github.io/arthas/arthas-boot.jar

java -jar arthas-boot.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;选择需要attach的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-常用命令&#34;&gt;2 常用命令
&lt;/h2&gt;&lt;h3 id=&#34;21-dashboard&#34;&gt;2.1. dashboard
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;dashboard 命令可以查看当前系统的实时数据面板。可以查看到CPU、内存、GC、运行环境等信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ctrl + c 可以退出dashboard 命令&lt;/p&gt;
&lt;h3 id=&#34;22-thread&#34;&gt;2.2. Thread
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;thread {id} 命令会打印线程ID 的栈。用 thread 1 | grep &amp;lsquo;main(&amp;rsquo; 查找到main class。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;thread -b : 显示当前阻塞的线程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;目前只支持找出synchronized关键字阻塞住的线程， 如果是java.util.concurrent.Lock， 目前还不支持
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;thread -i 1000 -n 3: 每过 1000 毫秒进行采样，显示最占 CPU 时间的前 3 个线程&lt;/p&gt;
&lt;p&gt;thread &amp;ndash;state WAITING 查看处于等待状态的线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;23-trace&#34;&gt;2.3. trace
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;trace dh.webapi.form.controller.TemplateController getDetail
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 trace 命令可以跟踪统计方法耗时。&lt;/p&gt;
&lt;p&gt;继续跟踪耗时高的方法，然后再次访问。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;比如使用一个 Springboot 项目（当然，不想 Springboot 的话，你也可以直接在 UserController 里 main 方法启动）控制层 getUser 方法调用了 userService.get(uid);，这个方法中分别进行 check、service、redis、mysql 等操作操作。就可以根据这个命令跟踪出来哪里的耗时最长。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;24-jad--反编译指定已加载类的源码&#34;&gt;2.4. jad  反编译指定已加载类的源码
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;jad dh.webapi.form.biz.AreaBiz
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;25-monitor&#34;&gt;2.5. monitor
&lt;/h3&gt;&lt;p&gt;每 2秒统计一次 dh.webapi.form.controller.TemplateController 类的 getDetail 方法执行情况：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;monitor -c 2 dh.webapi.form.controller.TemplateController getDetail
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;26-sc-sm-查找jvm里已加载的类&#34;&gt;2.6 sc/ sm 查找JVM里已加载的类
&lt;/h3&gt;&lt;p&gt;sc 命令来查找JVM里已加载的类,通过-d参数，可以打印出类加载的具体信息，很方便查找类加载问题。并且支持统配  例如搜索 所有的 StringUtils , sc *StringUtils&lt;/p&gt;
&lt;p&gt;sm 命令是查找类的具体函数;  -d参数可以打印函数的具体属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sm -d java.math.RoundingMode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查找特定的函数，比如查找构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sm java.math.RoundingMode &amp;lt;init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;28-watch&#34;&gt;2.8. watch
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;watch dh.webapi.evidence.biz.EvidenceBiz doPostHashEvidence &amp;quot;{params,returnObj}&amp;quot; -x 5 -b -s

watch dh.framework.starter.shiro.filter.ShiroAuthcFilter onAccessDenied &amp;quot;{params,returnObj}&amp;quot; -x 5 -b -s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dh.framework.starter.shiro.session.RedisSessionDao doReadSession
dh.webapi.zhidun.dao.OwnerEvidenceMapper listEvidence
dh.framework.common.util.Requests post(java.lang.String, java.lang.String)
dh.webapi.evidence.biz.EvidenceBiz doPostHashEvidence
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
