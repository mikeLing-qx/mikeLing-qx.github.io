<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on mikeLing</title>
        <link>https://mikeLing-qx.github.io/post/</link>
        <description>Recent content in Posts on mikeLing</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>LexqinMike</copyright>
        <lastBuildDate>Thu, 01 Feb 2024 12:02:02 +0800</lastBuildDate><atom:link href="https://mikeLing-qx.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Mike Ling</title>
        <link>https://mikeLing-qx.github.io/p/mike-ling/</link>
        <pubDate>Thu, 01 Feb 2024 12:02:02 +0800</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/mike-ling/</guid>
        <description>&lt;p&gt;数字和布尔值  锁类型 ,这样的方式,  把强度给拉满, 就能解决掉我当下的问题, 我对于找工作这件事现在还是比较的有自信的 一个是以往以及最近的工作经历, 得到了认可 , 上一家公司每年都会给我涨薪, 还有就是相同年限的开发, 都有着比我现在高的工资, 一个是我也愿意接受用时间换钱,  在这次的情况下, 正好是一个非常好的机会, 我的学习和进步, 可以得以在工资上有所提升的转折, 好好的把握和表现, 在这两年的时间里, &lt;strong&gt;我希望至少能存够50w&lt;/strong&gt;, 在我30岁之前, 在财富增值的过程中==保持饥饿, 保持渴望==;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试是一个综合的评估, 平等交流, 技术探讨, 心态要好;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;==无财则力, 少有斗智, 饶则丰时==;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;找到合适的岗位进行投递&lt;/li&gt;
&lt;li&gt;==重新复习本文档==&lt;/li&gt;
&lt;li&gt;完成200道面试题的复习&lt;/li&gt;
&lt;li&gt;看模拟面试相关的视频&lt;/li&gt;
&lt;li&gt;现在是有些静不下心来, 我在想什么,
&lt;ol&gt;
&lt;li&gt;==&lt;strong&gt;投资&lt;/strong&gt;==&lt;/li&gt;
&lt;li&gt;&lt;del&gt;个人健康牙齿,&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;体检&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;strong&gt;保险&lt;/strong&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==**不要习得性无助, 要有明确的认识, 我完全有能力可以突破现状 , 这次面试是我学习和成长的机会 **==&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;提前认识到技术开发的局限性, 后续的职业发展和规划?
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通过英文学习, 到海外工作, 远程工作, 数字游民&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过投资学习, 实现资产增值, 这一部分是不确定的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术深入&lt;/strong&gt;, 这一部分的未来收入期望暂时只能看到3年的, 总共的金额, ==要看你, 完全取决于你==, ==只要奋斗就一定会有的收入==, 大概收入会是30w 到 50w&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寻求技术转型?&lt;/strong&gt; 还是向管理岗位走? 项目经理, 产品经理?&lt;/li&gt;
&lt;li&gt;人工智能开发? 这是我感兴趣的吗?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;我已经作出了约定了, 这是我必须要做到的事情
&lt;ol&gt;
&lt;li&gt;作出你的计划
&lt;ol&gt;
&lt;li&gt;下周开始面试! ! !  不管怎么样都要面&lt;/li&gt;
&lt;li&gt;今天看完Mysql&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直面你的感情&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;复习计划
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;spring boot&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spring&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spring cloud&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kafka + rocketmq&lt;/strong&gt; + rabbitMq&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nacos + dubbo&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;每天晚上&lt;strong&gt;花一个小时来看模拟面试&lt;/strong&gt;, 海哥的视频全部看完, 睡前&lt;/li&gt;
&lt;li&gt;今天主要看spring 的相关复习
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;晚上去游泳一下吧&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;==&lt;strong&gt;狠狠的逼自己一把&lt;/strong&gt;==, &lt;strong&gt;休息够了已经&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;==好好睡觉==, 好好吃饭, 好好工作&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我在这里是怎么优化查询慢的问题的, 怎么把它优化到可以接受的地步的?&lt;/p&gt;
&lt;p&gt;它里面调用的第三方的sdk, sdk提供的实例不支持多线程调用, 里面内部的调用是http请求, 所以相当于每一次加解密都会产生一次http请求, 所以会导致我们的业务变得非常的很慢, 尤其是遇到分页以及列表的场景, 这里使用 线程池 和Threadlocal 把sdk的实例, 项目启动的时候初始化,&lt;/p&gt;
&lt;p&gt;对加密字段的搜索问题, 解决方案是, 冗余字段, 对字符串进行拆分, 加密存放, 会放到多个字段里面, 搜索的命中效果可能没这么好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的架构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总体上每个项目都是依赖于我们架构师那边发布的framework pom, 在里面做了我们自身的各个微服务之间的二方的版本管理, 以及统一的三方依赖的关联, 但是我们也可以在自己的项目内部指定所需要的版本
&lt;ol&gt;
&lt;li&gt;架构组成是这样的, 有参考阿里的开发规范&lt;/li&gt;
&lt;li&gt;aip, bean, biz, manager, dao, mq, open, schedule
&lt;ol&gt;
&lt;li&gt;api 接口定义和参数的校验, biz 就是我们的service 层逻辑处理层 ,manager 是数据提供层, 对数据进行初步的封装, 数据的来源可以是该服务的持久层 , 也可以是从open层过来的, 可以是rpc, 也可以是http调用,  dao 是持久层, 数据库&lt;/li&gt;
&lt;li&gt;open 是对外提供接口额度 可以rpc 接口也可以是 http 接口, 对三方提供的, 不是页面的接口, 然后我们内部服务之间互相调用就只用引用这个包就可以了, 用dubbo 做rpc
&lt;ol&gt;
&lt;li&gt;rpc-接口层&lt;/li&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;li&gt;具体实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;bean&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;我们是有过两次的升级jdk的经验, 一次是升级到java11, 因为今年11的支持已经到期, 今年我们升级到jdk17&lt;/li&gt;
&lt;li&gt;mybatis 也升级过 从 tk 升级到 mybatis-plus&lt;/li&gt;
&lt;li&gt;swagger 升级到 v3&lt;/li&gt;
&lt;li&gt;我们有一个开发导航的官网, 里面有集成了, 我们的项目, 开发,测试, 生产, 项目的api文档&lt;/li&gt;
&lt;li&gt;报警 monitor , 一个jar包有异常或者宕机都会发通知, 前端的异常也有&lt;/li&gt;
&lt;li&gt;部署的话, 分项目, 有一些接的外面的项目, 我们自己的服务器部署都是jar 包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;24/12/12&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复习本文档&lt;/li&gt;
&lt;li&gt;看Springcloud&lt;/li&gt;
&lt;li&gt;看Elasticsearch&lt;/li&gt;
&lt;li&gt;看Mongodb&lt;/li&gt;
&lt;li&gt;复习你的简历&lt;/li&gt;
&lt;li&gt;今晚2.5km&lt;/li&gt;
&lt;li&gt;==我不太喜欢随心所欲的生活, 它让我找不到我的价值, 它也不能实现我自身的价值==&lt;/li&gt;
&lt;li&gt;==把你的项目给提前准备一下, 会有哪些问题==&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241218161438293.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241218161438293&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;你好, 面试官, 我叫凌启祥, 今年28岁, 19年毕业,毕业之后在广州做了一年, 后面来到深圳这边, 一直在从事java开发工作, 我介绍一下我最近做的一个项目
&lt;ol&gt;
&lt;li&gt;项目的背景. 是中山审计局的==现场作业项目==, &lt;strong&gt;审计业务管理与审计作业的信息化,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;项目的功能
1.&lt;/li&gt;
&lt;li&gt;负责的模块&lt;/li&gt;
&lt;li&gt;技术架构 java8, spring boot ,rocketmq, , redis, elasticsearch, 容器部署, nginx, 一个国产化数据库神通数据库, 业务数据库, 一个pg数据库, 这个是ETL工程的库&lt;/li&gt;
&lt;li&gt;项目
&lt;ol&gt;
&lt;li&gt;难点&lt;/li&gt;
&lt;li&gt;亮点&lt;/li&gt;
&lt;li&gt;解决问题的能力&lt;/li&gt;
&lt;li&gt;学习能力&amp;ndash;单机的&lt;/li&gt;
&lt;li&gt;架构思维&lt;/li&gt;
&lt;li&gt;管理能力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;面试需要==更加自信一点==,&lt;strong&gt;首先再把我的项目给整理整理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;==个人博客==&lt;/li&gt;
&lt;li&gt;我现在是行动力不足的问题, 也不是, 内心的渴望不足&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;项目&#34;&gt;项目
&lt;/h1&gt;&lt;h2 id=&#34;1-现场作业&#34;&gt;1. 现场作业
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;==项目的背景==. 是中山审计局的==现场作业项目==, &lt;strong&gt;审计业务项目的管理与审计作业的信息化,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;==项目的功能==,
&lt;ol&gt;
&lt;li&gt;基础的用户模块, 权限模块, spring security 注解实现接口鉴权&lt;/li&gt;
&lt;li&gt;负责的模块主要有这些&lt;/li&gt;
&lt;li&gt;审计项目&amp;ndash;项目资料树&amp;ndash;树下面会有文档, 可以通过wps插件在线编辑, 记录修改历史, 保存之后, 通过回调接口会把最新文档同步给我们的系统&lt;/li&gt;
&lt;li&gt;然后相关文档的流程审批等&lt;/li&gt;
&lt;li&gt;上传的文档更新和修改都会, 更新到ES里面, 通过ES 查询, 高亮显示结果&lt;/li&gt;
&lt;li&gt;二期的时候用了RocketMq 同步项目资料树和审计文档 给市智慧云系统
&lt;ol&gt;
&lt;li&gt;当时选型呢, rabbitmq, 因为国产化的需求, 而且是因为有事务和顺序的业务场景, 所以选择了rocket&lt;/li&gt;
&lt;li&gt;事务消息&amp;ndash;&lt;/li&gt;
&lt;li&gt;顺序消息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;==负责的模块==&lt;/li&gt;
&lt;li&gt;技术架构 java8, spring boot ,rocketmq , redis, elasticsearch, 容器部署, nginx, 一个国产化数据库神通数据库, 业务数据库, 一个pg数据库, 这个是ETL工程的库&lt;/li&gt;
&lt;li&gt;==项目==
&lt;ol&gt;
&lt;li&gt;难点&lt;/li&gt;
&lt;li&gt;亮点&lt;/li&gt;
&lt;li&gt;解决问题的能力&amp;ndash;当时这个rocketmq 数据同步是二期的时候加的需求, 后面我们在技术选型上考虑了要么就http请求, rpc 请求, 然后在==&lt;strong&gt;某些场景下需要有顺序消息的需求&lt;/strong&gt;==, 同时还有因为政府项目, 还有国产化的需求, 我们就使用了rocketMq 做消息中间件&lt;/li&gt;
&lt;li&gt;学习能力&lt;/li&gt;
&lt;li&gt;架构思维&lt;/li&gt;
&lt;li&gt;管理能力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-知产裁决&#34;&gt;2. 知产裁决
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;项目的背景: 市场监督管理局, 一站式的知识产权纠纷解决平台,  公司商户提交案件, 执法员&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-溯源系统&#34;&gt;3. 溯源系统
&lt;/h2&gt;&lt;h2 id=&#34;4-信息采集&#34;&gt;4. 信息采集
&lt;/h2&gt;&lt;h1 id=&#34;0-接口和继承&#34;&gt;0. 接口和继承
&lt;/h1&gt;&lt;p&gt;接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义契约&lt;/strong&gt;：接口常用于定义不同类之间的公共行为，确保所有实现类都遵守相同的接口契约。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态性&lt;/strong&gt;：&lt;strong&gt;允许通过接口引用来操作不同类的对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;继承&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码复用&lt;/strong&gt;：继承通过重用父类的功能&lt;strong&gt;减少代码重复&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法扩展&lt;/strong&gt;：继承允许子类在父类基础上添加新功能或修改已有功能。&lt;/p&gt;
&lt;h1 id=&#34;1-栈与堆的区别是什么&#34;&gt;1. 栈与堆的区别是什么
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;栈内存（Stack Memory）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分配与管理&lt;/strong&gt;：栈内存由==编译器自动分配和释放==，内存空间在==方法执行时自动分配给每个线程==。每个线程都有自己独立的栈内存。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动分配&lt;/strong&gt;：Java 栈内存是由 JVM 自动管理的，栈帧的分配和释放由方法调用过程决定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可能栈溢出&lt;/strong&gt;：在&lt;strong&gt;递归调用过深&lt;/strong&gt;或方法调用过多时可能导致栈溢出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可调整栈大小&lt;/strong&gt;：通过 JVM 参数 &lt;code&gt;-Xss&lt;/code&gt; 调整线程栈大小，但仍需要优化代码逻辑以避免不必要的栈占用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储内容&lt;/strong&gt;：栈内存主要存储局部变量、方法参数、方法调用信息（如返回地址）等。在==执行一个方法时，相关的数据会压入栈，当方法执行结束后，栈中的数据会自动弹出释放==。溢出会报 ==StackOverflowError==&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问速度&lt;/strong&gt;：栈内存是==连续的，访问速度很快，但空间相对较小==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期&lt;/strong&gt;：局部变量的生命周期随着方法调用而开始和结束，方法执行完毕，栈内存会自动回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;堆内存（Heap Memory）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分配与管理&lt;/strong&gt;：堆内存是用于动态分配的内存，由==程序员通过代码（如 &lt;code&gt;new&lt;/code&gt; 关键字）显式分配，内存管理通常由垃圾回收器负责回收==。堆内存是==全局共享的==，也就是说所有线程可以访问堆中的对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储内容&lt;/strong&gt;：堆内存主要存储对象以及对象内部的属性数据。线程共享堆内存，因此多个线程可以访问和修改堆中的相同对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问速度&lt;/strong&gt;：由于堆内存是动态分配的，而且不像栈那样是连续的，访问速度相对较慢。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期&lt;/strong&gt;：堆内存中的对象生命周期是动态的，它们的内存不会因为方法结束而自动释放，而是依赖垃圾回收机制（如 JVM 中的垃圾回收器）进行回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==区别==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线程独立性&lt;/strong&gt;：==栈是线程私有的==，堆是线程共享的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期&lt;/strong&gt;：栈内存随着方法的执行自动管理，堆内存的管理依赖程序员和垃圾回收机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储数据&lt;/strong&gt;：栈存储局部变量和方法调用信息，堆存储对象和实例数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速度&lt;/strong&gt;：栈的访问速度快，堆的访问速度慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-this-关键字的作用是什么&#34;&gt;2. this 关键字的作用是什么
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt; 是一个引用变量，==指向当前对象的实例==。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;区分实例变量和局部变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用当前对象的其他方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在构造函数中调用另一个构造函数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回当前对象的引用，支持链式调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作为参数传递当前对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-什么是多线程&#34;&gt;3. 什么是多线程
&lt;/h1&gt;&lt;p&gt;多线程：通过空间（cpu的时间片的利用）换取响应时间&lt;/p&gt;
&lt;p&gt;线程和进程的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程：程序的一次执行，进程之间内存是独立的，无法共享内存空间，至少有一个线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程：进程内部的最小执行单元，线程之间是共享堆内存，栈内存是独立的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建线程的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;继承Thread类，重写run方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现Runnable接口，实现里面的run方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匿名内部类实现Runnable接口，New Thread(()-&amp;gt;执行内容)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程的执行：==一定要用Start方法执行线程，如果run方法执行是直接执行类的方法，不会以线程的方式执行==&lt;/p&gt;
&lt;p&gt;用户线程和守护线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户线程：一般是用户创建的，不会随着主线程的终止而终止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;守护线程：一般是系统创建的，会随着主线的终止而终止，垃圾回收线程就是守护线程，可以使用&lt;/p&gt;
&lt;p&gt;Thread::setDaemon方法将用户线程转化为守护线程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-synchronized&#34;&gt;4. synchronized
&lt;/h1&gt;&lt;p&gt;线程安全：当多线程执行同一段程序的时候，如果发生了和预期结果不一致的情况，就是线程不安全&lt;/p&gt;
&lt;p&gt;的，如果和预期结果一致就是线程安全的，可以加锁解决(把并行运行的线程变成串行化执行)。&lt;/p&gt;
&lt;p&gt;同步锁的几种方式(锁对象):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步代码块加锁：sync&amp;hellip;.(obj)&lt;/li&gt;
&lt;li&gt;同步方法加锁：等价于sync&amp;hellip;.(this)&lt;/li&gt;
&lt;li&gt;静态同步方法加锁:等价于sync&amp;hellip;.(this.getClass())&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==死锁：线程之间互相等待对方释放锁，就产生了死锁，尽量不要同步中嵌套同步==。&lt;/p&gt;
&lt;p&gt;死锁发生的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;线程 1&lt;/strong&gt; 先获取了资源 A 的锁，准备获取资源 B 的锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程 2&lt;/strong&gt; 同时获取了资源 B 的锁，准备获取资源 A 的锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程 1&lt;/strong&gt; 等待 &lt;strong&gt;线程 2&lt;/strong&gt; 释放资源 B，而 &lt;strong&gt;线程 2&lt;/strong&gt; 正在等待 &lt;strong&gt;线程 1&lt;/strong&gt; 释放资源 A。&lt;/li&gt;
&lt;li&gt;由于==两个线程互相等待对方释放资源==，进入了死锁状态，程序无法继续执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件, 共享资源 X 和Y只能被一个线程占用&lt;/li&gt;
&lt;li&gt;请求和保持,  线程t1 已经获取 资源X, 在等待共享资源Y的时候不释放 X&lt;/li&gt;
&lt;li&gt;不可抢占, 也就是其他线程不能强行占有线程T1 占有的子牙UN&lt;/li&gt;
&lt;li&gt;循环等待, 两个线程相互等待对方释放资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预防死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次性请求所有资源&lt;/li&gt;
&lt;li&gt;如果占用资源的线程申请资源申请不到, 那么可以主动的去释放本身持有的资源&lt;/li&gt;
&lt;li&gt;保持统一的获取锁的顺序, 比如都是先申请A -&amp;gt; B -&amp;gt; C&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;伪码
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 定义两个资源
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;resource A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;resource B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 线程 1 的执行过程
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Thread 1:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lock(A)    // 获取资源 A 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    wait(100)  // 等待一段时间，让线程 2 有机会获取资源 B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lock(B)    // 尝试获取资源 B 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // 操作资源 A 和 B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unlock(B)  // 释放资源 B 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unlock(A)  // 释放资源 A 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 线程 2 的执行过程
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Thread 2:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lock(B)    // 获取资源 B 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    wait(100)  // 等待一段时间，让线程 1 有机会获取资源 A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lock(A)    // 尝试获取资源 A 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // 操作资源 A 和 B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unlock(A)  // 释放资源 A 的锁
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    unlock(B)  // 释放资源 B 的锁
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;5-线程有哪些状态&#34;&gt;5. 线程有哪些状态
&lt;/h1&gt;&lt;p&gt;new, run, blocked, wait, time-wait, terminate&lt;/p&gt;
&lt;p&gt;==NEW==(新建)&lt;/p&gt;
&lt;p&gt;线程刚被创建，但是并未启动。&lt;/p&gt;
&lt;p&gt;==RUNNABLE==(可运行)&lt;/p&gt;
&lt;p&gt;线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。&lt;/p&gt;
&lt;p&gt;==BLOCKED==(锁阻塞)&lt;/p&gt;
&lt;p&gt;当一个线程试图获取一个对象锁，而==该对象锁被其他的线程持有，则该线程进入Blocked状态==；当该线程持有锁 时，该线程将变成Runnable状态。&lt;/p&gt;
&lt;p&gt;==WAITING==(无限等待)&lt;/p&gt;
&lt;p&gt;一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤&lt;/p&gt;
&lt;p&gt;醒的，==必须等待另一个线程调用notify或者notifyAll方法才能够唤醒==。&lt;/p&gt;
&lt;p&gt;==TIMED_WAITING==(计时等待)&lt;/p&gt;
&lt;p&gt;同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期&lt;/p&gt;
&lt;p&gt;满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。&lt;/p&gt;
&lt;p&gt;==TERMINATED==(被终止)&lt;/p&gt;
&lt;p&gt;因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240918160428024.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240918160428024&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-wait-和-sleep的区别&#34;&gt;6. wait 和 sleep的区别
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sleep()方法，属于Thread类。wait()方法，属于Object类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sleep()方法导致了==程序暂停执行指定的时间，让出cpu调度其他线程==，不会释放锁或监视器资源，==当指定的时间到了又会自动恢复运行状态==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wait()  ==必须在同步代码块或同步方法中调用== , 是把控制权交出去，==线程会释放持有的锁==  直到收到其他线程的通知（==通过同一个对象的== &lt;code&gt;notify()&lt;/code&gt; 或 &lt;code&gt;notifyAll()&lt;/code&gt; ,  通常用于线程间的协作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;7-线程interrupt&#34;&gt;7. 线程interrupt()
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;interrupt()&lt;/code&gt; 方法的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中断标志&lt;/strong&gt;：调用 &lt;code&gt;interrupt()&lt;/code&gt; 后，线程的中断状态将被设置为 &lt;code&gt;true&lt;/code&gt;。这仅仅是发送了一个中断信号，线程并不会立即停止运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配合阻塞操作&lt;/strong&gt;：如果线程处于阻塞状态（例如 &lt;code&gt;sleep()&lt;/code&gt;、&lt;code&gt;wait()&lt;/code&gt; 或 &lt;code&gt;join()&lt;/code&gt;），那么线程会立即抛出 &lt;code&gt;InterruptedException&lt;/code&gt; 异常，并清除中断状态，这样可以让线程提前结束阻塞操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查中断状态&lt;/strong&gt;：线程可以通过 &lt;code&gt;Thread.interrupted()&lt;/code&gt; 或 &lt;code&gt;isInterrupted()&lt;/code&gt; 来检查是否有中断请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;interrupt()&lt;/code&gt;方法后，线程不会自动停止，但是它会开始尝试响应中断请求。线程是否停止，以及何时停止，取决于线程如何响应中断信号。正确的做法是，在线程的运行逻辑中，定期检查中断状态，或者在可能长时间运行的操作中使用会抛出&lt;code&gt;InterruptedException&lt;/code&gt;的方法，以便能够响应中断请求。&lt;/p&gt;
&lt;h1 id=&#34;8-说一下线程的优先级&#34;&gt;8. 说一下线程的优先级
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置并理解线程的优先级priority , 优先级越高,获取到cpu的时间片越多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理解并掌握join()方法的使用 : thread.Join把指定的线程加入到当前线程，可以==将两个交替执行的线 程合并为顺序执行的线程==。比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续 执行线程B。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理解yield()方法的概念 : 暂停当前正在执行的线程，并执行其他线程。（可能没有效果）, 目的是让具有相同优先级的线程之间能够适当的轮换执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;9-线程安全的三大特性&#34;&gt;9. 线程安全的三大特性
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;有序性: 由jvm指令重排导致的，指令重排的结果对于单线程来说是一致性，没有什么影响（在指令重排的过程中会考虑数据依赖的问题），多线程情况下避免指令重排带来程序执行错误的危害。==有些情 况可以使用volatile，或者使用synchronized==同步块或者同步方法或者同步锁。&lt;/li&gt;
&lt;li&gt;可见性: 和java内存模型有关，==多线程访问共享变量时会创建副本变量，修改后再写回主变量，其他线程副本变量的值没有及时更新==，导致可见性的问题&lt;/li&gt;
&lt;li&gt;原子性: 不可分割，说明这一段程序要么都执行，要么不执行，并且不能被其他线程影响, 可以使用原子类AtomicXXX&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;10-java内存&#34;&gt;10. java内存
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/JVM.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;JVM&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;JVM内存结构、Java对象模型和Java内存模型，这就是三个截然不同的概念&lt;/p&gt;
&lt;h2 id=&#34;1-jvm内存结构有哪些&#34;&gt;1. JVM内存结构有哪些
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240919101322185.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240919101322185&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PC寄存器&lt;/li&gt;
&lt;li&gt;java 虚拟机栈&lt;/li&gt;
&lt;li&gt;本地方法栈&lt;/li&gt;
&lt;li&gt;java堆&lt;/li&gt;
&lt;li&gt;方法区 内包含了运行时常量池&lt;/li&gt;
&lt;li&gt;所有线程共享的数据区域&lt;/li&gt;
&lt;li&gt;各个线程独享的数据区域&lt;/li&gt;
&lt;li&gt;运行时常量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==JVM内存结构，由Java虚拟机规范定义是Java程序执行过程中，由JVM管理的不同数据区 域。各个区域有其特定的功能。==&lt;/p&gt;
&lt;h2 id=&#34;2-java对象模型&#34;&gt;2. java对象模型
&lt;/h2&gt;&lt;p&gt;HotSpot 虚拟机设计了一个OOP-Klass Model,OOP（Ordinary Object Pointer）指的是普通对象指针,  Klass用来 描述对象实例的具体类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;每一个Java类，在被JVM加载的时候，JVM会给这个类创建一个 instanceKlass 对象，保存在方法 区，用来在JVM层表示该Java类&lt;/strong&gt;。当我们在Java代码中，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用new创建一个对象的时候，JVM会创建一 个 instanceOopDesc 对象&lt;/strong&gt;，这个对象中包含了对象头以及实例数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240919103410432.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240919103410432&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-堆内存中的实例&#34;&gt;1. 堆内存中的实例
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对象头（Object Header）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个 Java 对象都有一个对象头，用于存储与对象相关的元数据。对象头包含以下信息：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mark Word&lt;/strong&gt;：==用于存储对象的哈希码、GC 状态、锁状态等信息==。它占用 32 位或 64 位，具体取决于 JVM 和系统架构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class Pointer（类型指针）&lt;/strong&gt;：指向对象的类型信息，即该对象所属的类。==这部分告诉 JVM 该对象属于哪个类==，从而可以访问==类的元数据==（如方法表、字段布局等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组长度&lt;/strong&gt;：如果对象是数组，Java 对象头还会包含一个额外的字段，用来记录数组的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例数据（Instance Data）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;实例数据部分包含==对象的所有实例字段==。不同类型的字段（如 &lt;code&gt;int&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;boolean&lt;/code&gt; 等）根据它们的字节大小被排列存储。JVM 可能会对字段进行内存对齐，以提高访问效率。&lt;/li&gt;
&lt;li&gt;引用类型字段==存储的是对象的引用（指针），而非实际的数据对象。引用指向堆内存中的另一个对象==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对齐填充（Padding）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Java 对象的内存布局通常要求对象的大小是 8 字节的倍数，因此在对象的末尾可能会有额外的填充字节来满足这一要求。这些填充字节不会存储任何有用的数据，只是为了满足内存对齐的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	 ==伪共享==是指当多个线程在共享内存区域中操作不同的数据时，==这些数据在缓存中恰好落在同一个缓存行中== ,  ==由于多个线程频繁导致缓存行失效，缓存失效带来的内存重新加载会显著降低程序的并发性能==。即使每个线程修改的是不相关的数据，这种不必要的同步机制使 CPU 和内存的性能浪费在无效的缓存操作上。&lt;/p&gt;
&lt;h2 id=&#34;3-介绍一下java方法区&#34;&gt;3. 介绍一下java方法区
&lt;/h2&gt;&lt;p&gt;在Java内存模型中，方法区（Method Area）是JVM规范中定义的一个内存区域，它用于存储以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;类信息&lt;/strong&gt;：==包括类的名称、修饰符、字段、方法、接口等==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常量池&lt;/strong&gt;：存储编译期生成的各种字面量和符号引用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态变量&lt;/strong&gt;：==类级别的静态变量==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;即时编译器编译后的代码&lt;/strong&gt;：==JIT编译器编译后的机器码==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;：可能还包括JVM内部的一些其他信息，如对类的锁定、同步等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法区是所有线程共享的内存区域，它在JVM启动时创建。在Java 8之前，方法区通常位于永久代（PermGen），但在Java 8及以后的版本中，方法区被移到了元空间（Metaspace），&lt;strong&gt;元空间使用的是本地内存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，方法区并不是堆内存的一部分，它与Java堆（Heap）是两个不同的内存区域。堆内存主要用于存储对象实例和数组。&lt;/p&gt;
&lt;h2 id=&#34;4-java内存模型-jmm&#34;&gt;4. java内存模型 JMM
&lt;/h2&gt;&lt;p&gt;Java内存模型就是一种==符合内存模型规范的==，屏蔽了各种硬件和操作系统的访问差异的，保证了Java 程序在各种平台下对内存的访问都能保证效果一致的机制及规范&lt;/p&gt;
&lt;p&gt;==和多线程相关的，他描述了一组规则或规范==，这个规范定义了一个线程对共享变量的 写入时对另一个线程是可见的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240919105400438.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240919105400438&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;==第一条关于线程与主内存：线程对共享变量的所有操作都必须在自己的工作内存（本地内存）中进行， 不能直接从主内存中读写==&lt;/p&gt;
&lt;p&gt;==第二条关于线程间本地内存：不同线程之间无法直接访问其他线程本地内存中的变量，线程间变量值的 传递需要经过主内存来完成==&lt;/p&gt;
&lt;h1 id=&#34;11-volatile&#34;&gt;11. volatile
&lt;/h1&gt;&lt;p&gt;保证了==可见性和有序性==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;==缓存一致性==: 一个变量如果用volatile修饰, 保证了可见性&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将当前处理器==缓存行的数据会写回到系统内存==。&lt;/li&gt;
&lt;li&gt;这个写回内存的操作会引起在==其他CPU里缓存了该内存地址的数据无效==。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;==内存屏障防止指令重排==（解决指令重排对volatile修饰的变量不会产生影响）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;适用场景&lt;/p&gt;
&lt;p&gt;a. 对变量的写入操作不依赖其当前值&lt;/p&gt;
&lt;p&gt;​    不满足：number++、count=count*5等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;==满足：boolean变量、直接赋值的变量等==
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;b. 该变量没有包含在具有其他变量的不变式中   不满足：不变式 low&amp;lt;up&lt;/p&gt;
&lt;h1 id=&#34;12-原子性&#34;&gt;12. 原子性
&lt;/h1&gt;&lt;p&gt;count++并不是原子性操作&lt;/p&gt;
&lt;p&gt;count = 5 开始，流程分析：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线程1读取count的值为5 ; 线程2读取count的值为5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程2加1操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程2最新count的值为6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程2写入值到主内存的最新值为6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程1的count为5，线程2的count为6 如果切换到线程1执行，那么线程1得到的结果是6, 写入到主内存的值还是6&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用==synchronized==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用==ReentrantLock==（可重入锁）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用==AtomicInteger==（原子操作）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Java中的原子操作包括：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1）除long和double之外的基本类型的赋值操作
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2）所有引用reference的赋值操作
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3）java.util.concurrent.Atomic.* 包中所有类的一切操作。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4）cas操作是原子操作。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;13-synchronized&#34;&gt;13. synchronized
&lt;/h1&gt;&lt;p&gt;同一时刻==只有一个线程执行synchronized声明的 代码块==。还可以保证共享变量的内存可见性。同一时刻只有一个线程执行，这部分代码块的==重排序也不 会影响其执行结果==。也就是说使用了synchronized可以保证并发的原子性，可见性，有序性&lt;/p&gt;
&lt;h2 id=&#34;1-可见性怎么解决的&#34;&gt;1. 可见性怎么解决的?
&lt;/h2&gt;&lt;p&gt;线程加锁时（进入同步代码块时）：将==清空本地内存中共享变量的值==，从而使用共享变量时需要从==主内 存中重新读取最新的值==（加锁与解锁是同一把锁）&lt;/p&gt;
&lt;p&gt;==执行过程==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获得互斥锁（同步获取锁）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清空本地内存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将更改后的共享变量的值刷新到主内存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放互斥锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-同步原理&#34;&gt;2. 同步原理
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;普通同步方法，==锁是当前实例对象this==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态同步方法，==锁是当前类的class对象==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步方法块，==锁是括号里面的对象==&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==同步操作主要是monitorenter和monitorexit这两个jvm指令实现==&lt;/p&gt;
&lt;p&gt;synchronized是通过访问锁对象的monitor和mark word实现同步的&lt;/p&gt;
&lt;h3 id=&#34;1-markword-什么是&#34;&gt;1. markword 什么是?
&lt;/h3&gt;&lt;p&gt;于存储对象自身的运行时数据，==存储对象状态、锁信息等的结构，在同步、垃圾回收等机制中起到重要作用==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哈希码（HashCode）&lt;/strong&gt;：对象的哈希值，通常通过 &lt;code&gt;hashCode()&lt;/code&gt; 方法生成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;锁状态&lt;/strong&gt;：用来支持对象的同步机制。当一个对象被锁住时，Mark Word 中会记录这个锁的状态，比如轻量级锁、重量级锁等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;垃圾回收标记&lt;/strong&gt;：在垃圾回收（GC）过程中，Mark Word 也可以存储一些 GC 相关的信息，比如对象是否已经被标记为可回收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;偏向锁&lt;/strong&gt;：在某些情况下，Mark Word 可以记录对象的偏向线程信息，以优化线程同步性能&lt;/p&gt;
&lt;h3 id=&#34;2-monitor-是什么&#34;&gt;2. monitor 是什么?
&lt;/h3&gt;&lt;p&gt;==每一个对象都有一个隐式的Monitor,  可以使用 &lt;code&gt;synchronized&lt;/code&gt; 关键字进行同步的原因==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互斥锁&lt;/strong&gt;：确保同一时刻只有一个线程可以访问被锁定的代码块，避免并发线程之间的冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程通信&lt;/strong&gt;：通过 &lt;code&gt;wait()&lt;/code&gt; 和 &lt;code&gt;notify()&lt;/code&gt; 等方法，Monitor 也可以用来管理线程之间的协调与通信。这是因为一个对象的 Monitor 还维护了一个等待队列，线程可以通过 &lt;code&gt;wait()&lt;/code&gt; 进入等待队列，然后被其他线程通过 &lt;code&gt;notify()&lt;/code&gt; 唤醒。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240919144955923.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240919144955923&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Owner：初始时为NULL表示当前没有任何线程拥有该monitor record，==当线程成功拥有该锁后保 存线程唯一标识==，当锁被释放时又设置为NULL；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EntryQ:关联一个系统互斥锁（semaphore），==阻塞所有试图锁住monitor record失败的线程==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RcThis:表示blocked或waiting在该monitor record上的所有线程的个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nest:用来实现重入锁的计数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashCode:保存从对象头拷贝过来的HashCode值（可能还包含GC age）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Candidate:用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁， 如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻 塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate只有两种可能的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==0  表示没有需要唤醒的线程==&lt;/li&gt;
&lt;li&gt;==1 表示要唤醒一个继任线程来竞争锁==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-锁优化有哪些&#34;&gt;3. 锁优化有哪些?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;==偏向锁==: 如果一个线程获得了锁，那么锁就进 入偏向模式，此时Mark Word 的结构也变为偏向锁结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==轻量锁==:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当线程进入同步代码块时，JVM 会检查当前对象的 Mark Word（对象头中的一部分）。如果Mark Word 处于无锁状态，==JVM 会创建一个用于记录锁状态的&lt;strong&gt;锁记录（Lock Record）&lt;/strong&gt;，保存在当前线程的栈中==。&lt;/li&gt;
&lt;li&gt;然后 JVM 尝试使用&lt;strong&gt;CAS（Compare-And-Swap）操作&lt;/strong&gt;将对象的 ==Mark Word 拷贝到线程的锁记录中，并将对象的 Mark Word 更新为指向这个锁记录的指针==。此时对象处于轻量级锁定状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==自旋锁==: 自旋锁，就是让该线程等待一段时间，不会被立即挂起，看持有锁的线程是否会很快释放锁。怎&lt;/p&gt;
&lt;p&gt;么等待呢？==执行一段无意义的循环==即可（自旋）。 自旋等待不能替代阻塞，虽然它可以==避免线程切换带来的开销，但是它占用了处理器的时间==。如果持 有锁的线程很快就释放了锁，那么自旋的效率就非常好，反之，自旋的线程就会白白消耗掉处理的资 源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==适应自旋锁==: 它是由==前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定==。它怎么做呢？线程如果自旋成 功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再&lt;/p&gt;
&lt;p&gt;次成功，那么它就会允许自旋等待持续的次数更多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==锁消除==: JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。锁消除的依据是逃逸分析 的数据支持 例如: JDK的内置API时，如StringBuffffer、Vector、HashTable等，这个时 候会存在隐形的加锁操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public void test(){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Vector&amp;lt;Integer&amp;gt; vector = new Vector&amp;lt;Integer&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for(int i = 0 ; i &amp;lt; 10 ; i++){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            vector.add(i);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        System.out.println(vector);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在运行这段代码时，JVM可以明显检测到变量vector没有逃逸出方法vectorTest()之外，所以JVM可以&lt;/p&gt;
&lt;p&gt;大胆地将vector内部的加锁操作消除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==锁粗化==: 将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==重量锁==:  加锁解锁会导致线程从用户态到核心态的切换，消耗比较大的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;14-cas-是什么&#34;&gt;14. CAS 是什么
&lt;/h1&gt;&lt;p&gt;CAS在 &lt;strong&gt;先比较后修改&lt;/strong&gt; : &lt;strong&gt;通过三个参数 当前值v 旧的预期值o 要更新的值n，只有v==o的时候才能更新值o&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个CAS过程中，根本没有获取锁，释放锁的操作，==Unsafe 是CAS的核心类，它提供了硬件级别的原子操作==,&lt;/p&gt;
&lt;p&gt;缺陷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自旋, 循环时间长, 一直不成功&lt;/li&gt;
&lt;li&gt;只能保证一个共享变量&lt;/li&gt;
&lt;li&gt;ABA 问题, 可以通过加AtomicStampedReference, 版本号进行解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;15-native&#34;&gt;15. native
&lt;/h1&gt;&lt;p&gt;==&lt;code&gt;native&lt;/code&gt; 关键字用于声明本地方法，使得 Java 程序可以调用用其他语言（如 C/C++）实现的代码==&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;native关键词&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;javac生成&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class文件&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，比如&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;javac&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NativePeer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;javah生成&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h文件&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，比如&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;javah&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NativePeer&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;编写&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c语言文件&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，在其中&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include进上一步生成的&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h文件&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，然后实现其中声明而未实现的函数&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;生成&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dll共享库&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，然后&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Java程序load库&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，调用即可&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;native可以和任何除abstract外的关键字连用，这也说明了这些方法是有实体的，并且能够和其他&lt;/p&gt;
&lt;p&gt;Java方法一样，拥有各种Java的特性。&lt;/p&gt;
&lt;h1 id=&#34;16-atomic&#34;&gt;16. Atomic
&lt;/h1&gt;&lt;p&gt;.atomic包介绍&lt;/p&gt;
&lt;p&gt;里面放了一些原子操作类，我们可以使用这些api对共享变量进行并发操作，底层都是使用的cas，&lt;/p&gt;
&lt;p&gt;性能非常高&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;基本类型&lt;/p&gt;
&lt;p&gt;ATInteger，ATLong,ATBoolean&lt;/p&gt;
&lt;p&gt;get在前就是获取修改前的值，get在后就是获取修改后的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型&lt;/p&gt;
&lt;p&gt;ATRef&amp;hellip;：对Object的原子操作&lt;/p&gt;
&lt;p&gt;ATS..Ref:给Object加版本号，每次修改都比较版本号和Object，可以有多个版本（int）&lt;/p&gt;
&lt;p&gt;ATmak&amp;hellip;Ref:给Object加版本号，每次修改都比较版本号和Object，只能有两个版本号&lt;/p&gt;
&lt;p&gt;（boolean）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组类型&lt;/p&gt;
&lt;p&gt;ATIntegerArr&amp;hellip;:Integer类型的数组原子类&lt;/p&gt;
&lt;p&gt;ATLongArr..:Long类型的数组原子类&lt;/p&gt;
&lt;p&gt;前两个和基本类型使用方式差不多，多了个参数（下标）&lt;/p&gt;
&lt;p&gt;ATRef&amp;hellip;Arr:Object类型的数组&lt;/p&gt;
&lt;p&gt;和引用类型使用方式差不多，多了个参数（下标）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象的属性修改类型（修改volidate修饰的属性）&lt;/p&gt;
&lt;p&gt;==AtomicIntegerFieldUpdater:原子更新整形字段的更新器==&lt;/p&gt;
&lt;p&gt;==AtomicLongFieldUpdater：原子更新长整形字段的更新器==&lt;/p&gt;
&lt;p&gt;==AtomicReferenceFieldUpdater ：原子更新引用类形字段的更新器==&lt;/p&gt;
&lt;p&gt;通过这些类对要修改的javabean进行包装，能够原子性的修改javabean的属性&lt;/p&gt;
&lt;p&gt;使用修改器要注意的点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要修改的类和属性不能static，负责拿不到内存地址&lt;/p&gt;
&lt;p&gt;属性必须是外部可直接访问的，public修饰&lt;/p&gt;
&lt;p&gt;属性不能是fifinal类型，因为fifinal不能被修改&lt;/p&gt;
&lt;p&gt;==属性必须被volidate修饰==，因为cas只能保证原子性，要通过volidate保证有序性和可见性，&lt;/p&gt;
&lt;p&gt;才能保证线程安全。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jdk1.8新增类（LongAddr&amp;hellip;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对比ATLong性能更高，底层是使用多个变量对同一个变量进行分割，解决了同一个变量操作并发&lt;/p&gt;
&lt;p&gt;大时，等待较长时间消耗系统cpu资源较高的问题&lt;/p&gt;
&lt;h1 id=&#34;17-aqs--介绍一下&#34;&gt;17. AQS  介绍一下
&lt;/h1&gt;&lt;p&gt;==AbstractQueuedSynchronizer== 它只是一个抽象类，但是==JUC中的很多组件都是基于这个抽象类==， 也可以说这个AQS是多数JUC组件的基础&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供了两种锁的机制
&lt;ol&gt;
&lt;li&gt;排他锁 - RenntrantLock&lt;/li&gt;
&lt;li&gt;共享锁 - 读锁, 读写互斥, 写互斥 Countdownlatch, Semaphore&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;定义了 获取锁 是通过CAS 修改 State, 大于0说明有线程获取到资源, 等于0释放了资源&lt;/li&gt;
&lt;li&gt;未竞争到锁的线程,  会加入到双向链表中&lt;/li&gt;
&lt;li&gt;当资源被释放的时候, 公平锁需要去判断链表中, 是否有等待的线程, 有则需要排队等待&lt;/li&gt;
&lt;li&gt;三个核心问题
&lt;ol&gt;
&lt;li&gt;互斥变量设计, 存在竞争的时候如何保证变量更新的安全性&lt;/li&gt;
&lt;li&gt;未竞争到锁资源的线程的等待, 已经竞争到锁资源的线程的唤醒&lt;/li&gt;
&lt;li&gt;锁竞争的公平和非公平&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-state--head-tail&#34;&gt;1. state , head ,tail
&lt;/h2&gt;&lt;p&gt;state: AQS维护了一个volatile int类型的变量state表示当前同步状态。==当state&amp;gt;0时表示当前已有线程获取 到了资源，当state = 0时表示释放了资源==。&lt;/p&gt;
&lt;p&gt;head:  是队列的第一个节点，==表示当前正在持有锁或资源的线程==&lt;/p&gt;
&lt;p&gt;tail:  队列的最后一个节点，==表示最新添加到队列中的线程==&lt;/p&gt;
&lt;h2 id=&#34;2-资源获取方式&#34;&gt;2. 资源获取方式
&lt;/h2&gt;&lt;p&gt;就是通过cas 去修改state 状态; 改成功就获取到了 资源 ; 没修改成功就没有获取到 资源)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exclusive（独占，只有一个线程能执行，如ReentrantLock）&lt;/li&gt;
&lt;li&gt;Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获取同步状态失败时，AQS则会将==当前线程已经等待状态等信息构造成一个节点==（Node）并将其加入到CLH同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点唤醒 （公平锁)&lt;/p&gt;
&lt;h2 id=&#34;3-总结&#34;&gt;3. 总结
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;知道什么是AQS&lt;/p&gt;
&lt;p&gt;==框架中制定了一个基本流程, 里面的state具体的获取方式 需要它的实现类去实现==，==这些实现类都是不同的锁里面都有一个内部类对应，state表示资源，如 果获取不到资源就将当前线程加入队列，通过自旋的方式重复尝试获取资源==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理解AQS工作原理&lt;/p&gt;
&lt;p&gt;==FIFO双向队列==，先进先出，node对应的是被阻塞的线程，==head，tail，这两个变量的操作包括入列操作都是cas原子操作==。但是==出列并不是cas==，因为==出列过程涉及多个步骤和指针的修改==, 独享方式下只有一个线程获取到了state状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;18-锁的类型有哪些&#34;&gt;18. 锁的类型有哪些
&lt;/h1&gt;&lt;p&gt;加锁会导致性能下降的原因&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上下文切换
&lt;ul&gt;
&lt;li&gt;内存指令的执行&lt;/li&gt;
&lt;li&gt;线程的阻塞和唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并行执行变为了串行执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==首先编译器会对我们的代码做优化, 会有锁粗化和锁消除==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;互斥锁: 保证在任一时刻，只能有一个线程访问该对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻塞锁: 可以说是==让线程进入阻塞状态进行等待==，当获得相应的信号（唤醒，时间） 时，才可以进入&lt;/p&gt;
&lt;p&gt;线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自旋锁: ==为了线程在阻塞之前就能获取到锁==, 自旋锁是采用让当前线程不停地的在循环体内执行实现的，当循环的条件被其他线程改变时，才能进入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读写锁: 读写锁实际是一种&lt;strong&gt;特殊的自旋锁&lt;/strong&gt;，它把对共享资源的访问者划分成读者和写者，读者只对共享资源进&lt;/p&gt;
&lt;p&gt;行读访问，写者则需要对共享资源进行写操作。 ==写者是排他性的，一个读写锁同时只能有一个写者或 多个读者（与CPU数相关），但不能同时既有读者又有写者==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公平锁:  ==当一个线程竞争锁的时候，队列中如果有线程按照顺序获取锁==&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁升级的过程&lt;/p&gt;
&lt;p&gt;无锁 -&amp;gt; 偏向锁 -&amp;gt; 轻量级锁(自旋锁)   -&amp;gt; 重量级锁&lt;/p&gt;
&lt;p&gt;偏向锁:  ==没有锁竞争或竞争非常少的场景==, 通过记录第一个获取锁的线程Id, ==假设锁的持有者不会改变==, 后续==同一个线程再次尝试获取锁, 无需进行真正的加锁操作==, 因为 锁偏向该线程, 这减少了锁的获取和释放的开销;&lt;/p&gt;
&lt;h1 id=&#34;19-reentrantlock&#34;&gt;19. ReentrantLock
&lt;/h1&gt;&lt;p&gt;可重入锁，是一种递归无阻塞的同步机制, ==是基于AQS的== 。等同于 synchronized 的使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公平锁: 原则就是是否遵循 FIFO 先进先出, 公平锁, ==在获取锁的时候判断队列中是否有线程在当前线程的前面==&lt;/li&gt;
&lt;li&gt;非公平锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内部实现原理：通过==尝试修改state从0-1获取锁，修改成功表示当前线程获取到锁了==，修改失败表示没有获取到，同一个线程获取到了锁可以重入，==重入的过程就是累计state的过程==，释放锁就是state减到0的过程，==减到0了就说明锁释放完成了==，唤醒后继节点继续执行。&lt;/p&gt;
&lt;p&gt;lock与synchronized 相比的对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;都是java 用来解决线程安全问题的工具, Lock 是JUC 里的接口, sync 是同步关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展性更强,  代码更加灵活 , 提供了条件Condition ,例如 有 tryLock 非阻塞的获取锁的方式, 已经可以实现公平和非公平锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意 ==&lt;strong&gt;ReentrantLock 锁的释放一定要在 finally 中进行释放&lt;/strong&gt;==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能差不多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronized 锁优化过程 无锁, 偏向, 轻量, 重量&lt;/li&gt;
&lt;li&gt;lock 有自旋锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;20-reentrantreadwritelock&#34;&gt;20. &lt;strong&gt;ReentrantReadWriteLock&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;==读操作不互斥，写操作互斥，读和写互斥==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;公平性：支持公平性和非公平性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重入性：支持重入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁降级：==写锁能够降级成为读锁，遵循获取写锁、获取读锁再释放写锁的次序。读锁不能升级为写锁==。  ==避免了释放写锁后立即被其他写线程抢占，让当前线程还能继续持有读锁，允许自己和其他读线程并发读取==&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;获取写锁&lt;/li&gt;
&lt;li&gt;执行写操作&lt;/li&gt;
&lt;li&gt;获取读锁（此时仍然持有写锁）&lt;/li&gt;
&lt;li&gt;释放写锁（降级，保持读锁）&lt;/li&gt;
&lt;li&gt;执行读操作&lt;/li&gt;
&lt;li&gt;释放读锁&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;内部维护了一对锁, 写锁和读锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;写锁之间是互斥的，读锁之间不互斥，读锁和写锁之间是互斥的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁降级：一个线程获取到了同一把锁的写锁之后还能够获取这个对象的读锁。（锁并不是 真的降级了） 锁不能够升级的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内部原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用state按位分割，高16位表示读，低16位表示写。&lt;/li&gt;
&lt;li&gt;获取写锁的过程就是修改低16位的过程，也表示写的重入次数&lt;/li&gt;
&lt;li&gt;获取读锁的过程就是修改高16位的过程，也表示所有获取到读锁的线程的重入总数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个线程自己的读锁的重入次数保存在ThreadLocal&amp;lt;&amp;gt;里面&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不管是写锁还是读锁，重入次数不能超过2^16-1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;21-condition&#34;&gt;21. Condition
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Condition&lt;/code&gt; 对象是和 &lt;code&gt;ReentrantLock&lt;/code&gt; 绑定的 , 相对于 Synchronized 控制同步中 Object的wait()、notify()系列方法, 提供了  await() ,  signal() ,  signalAll()&lt;/p&gt;
&lt;h1 id=&#34;22-cyclicbarrier-同步屏障&#34;&gt;22. CyclicBarrier 同步屏障
&lt;/h1&gt;&lt;p&gt;==就是一道门, 堵住了线程执行的道路，直到所有线程都就位，门才打开，让所有线程一起通过==&lt;/p&gt;
&lt;p&gt;内部使用的是 ReentrantLock 和 Condition&lt;/p&gt;
&lt;p&gt;两个构造方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CyclicBarrier(int parties)&lt;/li&gt;
&lt;li&gt;CyclicBarrier(int parties, Runnable barrierAction)  ==并在所有线程到达屏障时执行给定的操作, 由最后一 个进入屏障的线程执行==&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;await()方法的逻辑：如果该线程不是到达的最后一个线程，则他会一直处于等待状态，除非发生以下 情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最后一个线程到达，即count == 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超出了指定时间（超时等待）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他的某个线程中断当前线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他的某个线程中断另一个等待的线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他的某个线程在等待屏障超时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他的某个线程在此屏障调用reset()方法。reset()方法用于将屏障重置为初始状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;23-countdownlatch&#34;&gt;23. CountdownLatch
&lt;/h1&gt;&lt;p&gt;是基于内部的Sync , 而Sync 集成 AQS&lt;/p&gt;
&lt;p&gt;==一个或者多个线程，等待其他多个线程完成某件事情之后才能执行==, 使用是一次性的, 无法被重置,&lt;/p&gt;
&lt;p&gt;起点运动员应该等其他起点运动员准备好才可以起跑（CyclicBarrier）。&lt;/p&gt;
&lt;p&gt;接力运动员不需要关心其他人，只需和自己有关的起点运动员到接力点即可开跑 (CountDownLatch）。&lt;/p&gt;
&lt;h1 id=&#34;24--semaphore&#34;&gt;24.  Semaphore
&lt;/h1&gt;&lt;p&gt;==控制访问多个共享资源的计数器==,   &lt;code&gt;Semaphore&lt;/code&gt; 通过维护一个许可（permit）计数来管理资源的并发访问，通常用于限制能同时访问某个资源的线程数量。&lt;/p&gt;
&lt;p&gt;==Semaphore维护了一个信号量许可集。线程可以获取信号量的许可；当信号量中有可用的许可时， 线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以释放它所持有的信号量许 可，被释放的许可归还到许可集中，可以被其他线程再次获取==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类似于停车场, 有5个车位, 满了只能等,有出去的才能进来新的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;出Semaphore内部包含公平锁（FairSync）和非公平锁（NonfairSync），继承内部类 Sync，其中Sync继承AQS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Semaphore(int permits) ：创建具有==给定的许可数和非公平的 Semaphore==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Semaphore(int permits, boolean fair) ：创建具有给定的许可数和给定的公平设置的 Semaphore&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;25--clh&#34;&gt;25.  CLH
&lt;/h1&gt;&lt;p&gt;==自旋锁队列，常用于实现 AQS 中的等待队列==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;队列结构&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLH 队列是一个链表结构，每个节点代表一个线程。队列的头节点表示当前持有锁的线程，尾节点表示最后一个请求锁的线程。&lt;/li&gt;
&lt;li&gt;每个节点都有一个指向前驱节点的引用，这使得后继线程能够了解前驱线程的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;公平性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLH 队列天然支持公平性，后来的线程会在队列的尾部等待，从而避免了饥饿现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;自旋等待&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当线程请求锁时，如果锁被占用，线程会在队列中自旋，等待前驱节点释放锁。自旋方式减少了上下文切换的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;26-hashmap&#34;&gt;26. HashMap
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HashMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jdk7
&lt;ul&gt;
&lt;li&gt;数据结构：==数组+单项链表==&lt;/li&gt;
&lt;li&gt;构造方法：public HashMap(int initialCapacity, float loadFactor)
&lt;ul&gt;
&lt;li&gt;initialCapacity：初始化容量，容量必定是一个2^n,如果initialCapacity不是2^n，找大于initialCapacity的最近的一个2^n&lt;/li&gt;
&lt;li&gt;loadFactor：负载因子，默认0.75&lt;/li&gt;
&lt;li&gt;threshold：阈值 = loadFactor*initialCapacity，当数组中的元素数量超过阈值就会触发扩容，扩容原来的两倍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;put过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对key键进行hash运算获取结果value&lt;/li&gt;
&lt;li&gt;使用value和数组的长度进行&amp;amp;运算，得到下标位置&lt;/li&gt;
&lt;li&gt;到对应下标位置上查看
&lt;ul&gt;
&lt;li&gt;如果为空，就直接转化为Entry插入&lt;/li&gt;
&lt;li&gt;如果不为空，判断key是否一致，如果key一致就覆盖，如果不一致顺着链表往下面找&lt;/li&gt;
&lt;li&gt;如果找到了，就覆盖，如果一直找不到就放到最后一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当元素个数超过阈值，先扩容再插入（在多线程环境下可能造成死循环）
&lt;ul&gt;
&lt;li&gt;==多个线程同时操作链表，进行节点迁移时可能会形成&lt;strong&gt;环形链表&lt;/strong&gt;（循环引用==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对key键进行hash运算获取结果value&lt;/li&gt;
&lt;li&gt;使用value和数组的长度进行&amp;amp;运算，得到下标位置&lt;/li&gt;
&lt;li&gt;到对应下标位置上查看
&lt;ul&gt;
&lt;li&gt;如果为空，就返回null&lt;/li&gt;
&lt;li&gt;如果不为空，判断key是否一致，如果key一致就返回对应的value，如果不一致顺着链表往下面找&lt;/li&gt;
&lt;li&gt;如果找到了就返回，如果一直找不到就返回null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jdk8
&lt;ul&gt;
&lt;li&gt;数据结构：==数组+单向链表+红黑树==&lt;/li&gt;
&lt;li&gt;构造方法和jdk7一样&lt;/li&gt;
&lt;li&gt;方法
&lt;ul&gt;
&lt;li&gt;put过程 (先插入再扩容)
&lt;ul&gt;
&lt;li&gt;对key键进行hash运算获取结果value&lt;/li&gt;
&lt;li&gt;使用value和数组的长度进行&amp;amp;运算，得到下标位置&lt;/li&gt;
&lt;li&gt;到对应下标位置上查看
&lt;ul&gt;
&lt;li&gt;如果为空，就直接转化为Entry插入&lt;/li&gt;
&lt;li&gt;如果不为空，判断key是否一致，如果key一致就覆盖，如果不一致顺着链表往下面找&lt;/li&gt;
&lt;li&gt;如果找到了，就覆盖，如果一直找不到就放到最后一个&lt;/li&gt;
&lt;li&gt;如果链表长度超过8个就转化为红黑树&lt;/li&gt;
&lt;li&gt;如果该节点为树节点
&lt;ul&gt;
&lt;li&gt;比较根节点和当前节点的hash值&lt;/li&gt;
&lt;li&gt;==如果当前&amp;lt;根，往左边找，如果&amp;gt;往右边找==&lt;/li&gt;
&lt;li&gt;如果找到对应位置，如果key一样就覆盖&lt;/li&gt;
&lt;li&gt;key不一样就插入&lt;/li&gt;
&lt;li&gt;==如果发生了hash碰撞，key不一样但是hash值一样==
&lt;ul&gt;
&lt;li&gt;就通过再hash法，通过其他函数重新hash，==如果小于等于，放左边==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==重新调整树平衡==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当元素个数超过阈值，==先插入再扩容==（==避免在多线程环境下可能造成死循环==）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;get过程
&lt;ul&gt;
&lt;li&gt;对key键进行hash运算获取结果value&lt;/li&gt;
&lt;li&gt;使用value和数组的长度进行&amp;amp;运算，得到下标位置&lt;/li&gt;
&lt;li&gt;到对应下标位置上查看&lt;/li&gt;
&lt;li&gt;如果该节点为树节点
&lt;ul&gt;
&lt;li&gt;比较根节点和当前节点的hash值&lt;/li&gt;
&lt;li&gt;如果当前&amp;lt;根，往左边找，如果&amp;gt;往右边找&lt;/li&gt;
&lt;li&gt;如果找到对应位置，如果key一样就返回value&lt;/li&gt;
&lt;li&gt;key不一样就继续找，如果一直找不到就返回null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是链表就顺着链表结构往下遍历寻找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcurrentHashMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jdk7&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构
&lt;ul&gt;
&lt;li&gt;sengment数组+数组+单向链表
&lt;ul&gt;
&lt;li&gt;sengment继承Reentrent，具备加锁能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构造方法 public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)
&lt;ul&gt;
&lt;li&gt;initialCapacity
&lt;ul&gt;
&lt;li&gt;代表当前map总的容量大小，在初始化的时候分配给segment中的hashEntry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;loadFactor
&lt;ul&gt;
&lt;li&gt;负载因子，用来对segment中的hashEntry进行扩容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;concurrencyLevel
&lt;ul&gt;
&lt;li&gt;并发数就是segment数量，初始化之后就不能扩容了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jdk8&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组+链表+红黑树&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240924085728242.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240924085728242&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保证线程安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;==cas+synchronized==：==在尽可能小的粒度上加锁==，能使用cas就使用cas，不能使用就使用synchronized&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无锁并发（CAS）&lt;/strong&gt;：通过 CAS 操作实现部分无锁的更新操作，减少锁的竞争。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局部加锁&lt;/strong&gt;：在需要加锁时，==仅锁定某个桶bucket==，避免影响其他桶的并发操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;红黑树优化&lt;/strong&gt;：冲突严重时，将链表转换为红黑树，减少冲突带来的性能影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;弱一致性迭代器&lt;/strong&gt;：在并发操作中允许遍历继续进行，保证遍历时的安全性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渐进式扩容&lt;/strong&gt;：避免扩容时的全局锁定，通过多个线程并发扩容，保证扩容过程中的操作效率&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==只对写操作加锁，读操作不加锁==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt; 确保对 Map 本身的操作是线程安全的，但==&lt;strong&gt;复合操作或涉及多步骤的业务逻辑&lt;/strong&gt;可能仍然需要加锁来保证原子性==。&lt;/p&gt;
&lt;p&gt;对于单个操作，如 &lt;code&gt;put()&lt;/code&gt;, &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt; 等，不需要加锁，但如果你的==业务逻辑涉及多个操作的组合，或者需要跨多个共享资源操作时，依然需要加锁来确保线程安全==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用  ==map.computeIfAbsent(key, k -&amp;gt; newValue)==;  来避免显示的加锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对比HashTable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConcurrentHashMap锁粒度更小&lt;/li&gt;
&lt;li&gt;可以一边遍历一边修改map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcurrentSkipListMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构：多层单向链表,   ==因为是顺序的,所以建多个索引, 在索引上再建索引, 可以调表==&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240924090156686.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240924090156686&#34;
	
	
&gt;&lt;/li&gt;
&lt;li&gt;特点：
&lt;ul&gt;
&lt;li&gt;上一层的元素是下一层的索引&lt;/li&gt;
&lt;li&gt;上一层的元素，下一层一定有&lt;/li&gt;
&lt;li&gt;上一层的个数比下一层要少&lt;/li&gt;
&lt;li&gt;第一个元素在所有层都存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;put
&lt;ul&gt;
&lt;li&gt;抛取随机值
&lt;ul&gt;
&lt;li&gt;如果值大于当前层数
&lt;ul&gt;
&lt;li&gt;就新创建一层&lt;/li&gt;
&lt;li&gt;将当前元素插入到所有层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果小于当前层数
&lt;ul&gt;
&lt;li&gt;就将当前元素保存到对应层，并且下面依次保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;get
&lt;ul&gt;
&lt;li&gt;从最上层开始找&lt;/li&gt;
&lt;li&gt;比较大小，如果大于就往右边继续找&lt;/li&gt;
&lt;li&gt;如果小于，就进入下一层往右边找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;27-concurrentskiplistmap&#34;&gt;27. ConcurrentSkipListMap
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;线程安全&lt;/strong&gt;：所有操作都是线程安全的，多个线程可以同时对 &lt;code&gt;ConcurrentSkipListMap&lt;/code&gt; 进行读写操作，而不会导致数据不一致或竞争问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有序性&lt;/strong&gt;：与 &lt;code&gt;TreeMap&lt;/code&gt; 类似,&lt;code&gt;ConcurrentSkipListMap&lt;/code&gt; 会保持键的有序性。它支持键按自然顺序或自定义的比较规则排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无锁机制&lt;/strong&gt;：大部分读操作不需要加锁，而是通过 &lt;strong&gt;CAS（Compare-And-Swap）&lt;/strong&gt; 操作保证线程安全，这提升了并发性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳表结构&lt;/strong&gt;：使用跳表而非红黑树来管理有序的数据。跳表通过在链表上增加多层 &amp;ldquo;跳跃&amp;rdquo; 指针，提供了接近二分查找的性能。相比树形结构，跳表的实现更简单，也更适合高并发场景&lt;/p&gt;
&lt;h1 id=&#34;28-juc-队列&#34;&gt;28. JUC 队列
&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;queue&lt;/th&gt;
          &lt;th&gt;阻塞与否&lt;/th&gt;
          &lt;th&gt;是否有界&lt;/th&gt;
          &lt;th&gt;线程安全保障&lt;/th&gt;
          &lt;th&gt;适用场景&lt;/th&gt;
          &lt;th&gt;注意事项&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;ConcurrentLinkedQueue&lt;/td&gt;
          &lt;td&gt;非阻塞&lt;/td&gt;
          &lt;td&gt;无界&lt;/td&gt;
          &lt;td&gt;CAS&lt;/td&gt;
          &lt;td&gt;对全局的集合进行操作的场景&lt;/td&gt;
          &lt;td&gt;size() 是要遍历一遍集合，慎用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ArrayBlockingQueue&lt;/td&gt;
          &lt;td&gt;阻塞&lt;/td&gt;
          &lt;td&gt;有界&lt;/td&gt;
          &lt;td&gt;一把全局锁&lt;/td&gt;
          &lt;td&gt;生产消费模型，平衡两边处理速度&lt;/td&gt;
          &lt;td&gt;&amp;ndash;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;LinkedBlockingQueue&lt;/td&gt;
          &lt;td&gt;阻塞&lt;/td&gt;
          &lt;td&gt;可配置&lt;/td&gt;
          &lt;td&gt;存取采用2把锁&lt;/td&gt;
          &lt;td&gt;生产消费模型，平衡两边处理速度&lt;/td&gt;
          &lt;td&gt;无界的时候注意内存溢出问题&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PriorityBlockingQueue&lt;/td&gt;
          &lt;td&gt;阻塞&lt;/td&gt;
          &lt;td&gt;无界&lt;/td&gt;
          &lt;td&gt;一把全局锁&lt;/td&gt;
          &lt;td&gt;支持优先级排序&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SynchronousQueue&lt;/td&gt;
          &lt;td&gt;阻塞&lt;/td&gt;
          &lt;td&gt;无界&lt;/td&gt;
          &lt;td&gt;CAS&lt;/td&gt;
          &lt;td&gt;不存储元素的阻塞队列&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非阻塞队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConcurrentLinkedQueue
&lt;ul&gt;
&lt;li&gt;==一个基于链接节点的&lt;strong&gt;无边界的线程安全队列&lt;/strong&gt;，遵循队列的&lt;strong&gt;FIFO原则&lt;/strong&gt;，队尾入队，队首出队。采用&lt;strong&gt;CAS算法&lt;/strong&gt;来实现的==&lt;/li&gt;
&lt;li&gt;数据结构：单向链表&lt;/li&gt;
&lt;li&gt;非阻塞&lt;/li&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;==不会记录元素个数，size方法需要遍历整个队列，非常消耗资源==&lt;/li&gt;
&lt;li&gt;在某些场景下可以代替vector的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==业务操作上还是需要自己加锁==, 例如: queue.isEmpty()后再进行队列操作queue.add()是不能保证安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻塞队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;blockingQueue接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供4组api&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞api
&lt;ul&gt;
&lt;li&gt;put：放，==当队列放满了，放不进去线程被阻塞==&lt;/li&gt;
&lt;li&gt;take：取，==当队列为空，取不出来，线程被阻塞==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ArrayBlockingQueue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结:   ==是一种线程安全的、基于数组的有界阻塞队列。适合生产者-消费者模型==&lt;/li&gt;
&lt;li&gt;有界性：==有界, 固定大小==，必须初始化的时候设置边界&lt;/li&gt;
&lt;li&gt;构造方法 ArrayBlockingQueue(int capacity, boolean fair)
&lt;ul&gt;
&lt;li&gt;capacity：初始化容量&lt;/li&gt;
&lt;li&gt;fair：公平策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==内部使用一把锁, 生产者消费者用的同一个ReetrantLock，两个condition, notFull和notEmpty==
&lt;ul&gt;
&lt;li&gt;notFull ：控制生产者线程, 如果满了就阻塞&lt;/li&gt;
&lt;li&gt;notEmpty : 控制消费者线程, 如果是空的就阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LinkedBlockingQueue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构：单向链表&lt;/li&gt;
&lt;li&gt;有界性：可设置
&lt;ul&gt;
&lt;li&gt;如果不设置是 Int最大值&lt;/li&gt;
&lt;li&gt;也可以设置边界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公平性：==非公平==&lt;/li&gt;
&lt;li&gt;构造方法 public LinkedBlockingQueue(int capacity)
&lt;ul&gt;
&lt;li&gt;capacity：初始化容量，可以不传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==内部使用两把锁,== , ==所以相较于ArrayBlockingQueue, 消费者生产者可以并行==
&lt;ul&gt;
&lt;li&gt;==putLock==
&lt;ul&gt;
&lt;li&gt;notFull ：控制生产者线程condition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==takeLock==
&lt;ul&gt;
&lt;li&gt;notEmpty : 控制消费者线程condition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PriorityBlockingQueue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据结构：==二叉堆数组, 堆顶元素（优先级最高)==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有界性：无界&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公平性：非公平&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;PriorityBlockingQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Comparator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comparator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;initialCapacity:初始化容量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- comparator：比较器
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;插入操作&lt;/strong&gt;：新元素插入到堆的末尾，然后根据优先级上浮，调整堆的结构，确保堆的性质不被破坏。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;取出操作&lt;/strong&gt;：取出堆顶元素（优先级最高），然后将堆尾的元素移到堆顶，并根据优先级下沉，重新调整堆的结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加到PriorityBlockingQueue队列中的元素会排序，==取出来的永远是优先级最高的, 不保证同级之间的有序性, 先入的不一定先出==&lt;/li&gt;
&lt;li&gt;元素必须是可比较的
&lt;ul&gt;
&lt;li&gt;==元素本身实现Comparable接口==&lt;/li&gt;
&lt;li&gt;==创建PriorityBlockingQueue实例的时候传入Comparator比较器==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==SynchronousQueue==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构：没有任何元素空间, 内部不存储元素, 确保每次都是立即交付,  &lt;strong&gt;实时性要求高&lt;/strong&gt;、&lt;strong&gt;一对一数据交换&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有界性：无意义&lt;/li&gt;
&lt;li&gt;公平性：可设置&lt;/li&gt;
&lt;li&gt;构造方法
&lt;ul&gt;
&lt;li&gt;public SynchronousQueue(boolean fair)
&lt;ul&gt;
&lt;li&gt;fair：公平性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点：
&lt;ul&gt;
&lt;li&gt;内部没有一个元素，维护一组线程，一个take线程必须等待一个put线程，反之亦然&lt;/li&gt;
&lt;li&gt;==就好比将文件直接交给同事，还是将文件放到她的邮箱中并希望她能尽快拿到文件。==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;29-cap理论&#34;&gt;29. CAP理论
&lt;/h1&gt;&lt;p&gt;CP 和 AP 是分布式系统理论中的两个重要概念，它们来源于 CAP 定理（CAP Theorem），这是分布式计算领域的一个基本原理。CAP 定理指出，一个分布式系统不可能同时满足以下三个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt; - ==所有节点在同一时间看到的数据是一致的。当一个更新操作完成后，所有后续的读取操作都必须返回最新的值，即在任何时刻，所有节点中的数据都是相同的==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可用性（Availability）&lt;/strong&gt; - 系统在任何时候都能够响应用户的请求。即使某些节点出现故障，系统仍然能够继续处理请求，而不会出现整个系统不可用的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区容错性（Partition tolerance）&lt;/strong&gt;==是分布式系统中必然存在== - 系统能够容忍网络分区，即当网络发生故障时，系统仍然能够继续运行。分区容错性是分布式系统必须具备的特性，因为在现实世界中，网络问题是无法完全避免的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 CAP 定理的背景下，CP 和 AP 指的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CP（Consistency and Partition tolerance）&lt;/strong&gt; - 系统选择保证一致性和分区容错性，但可能会牺牲可用性。在&lt;strong&gt;网络分区发生时，系统可能会拒绝处理请求&lt;/strong&gt;，直到网络恢复，以确保数据的一致性。==典型的 CP 系统例子是分布式数据库，如 MongoDB==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AP（Availability and Partition tolerance）&lt;/strong&gt; - 系统选择保证可用性和分区容错性，但可能会牺牲一致性。在网络分区发生时，系统会继续处理请求，即使这意味着==不同节点上的数据可能会暂时不一致==。==典型的 AP 系统例子是一些分布式缓存系统，如 Redis==。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实际的分布式系统设计中，根据业务需求的不同，可能会倾向于选择 CP 或 AP。例如，对于需要强一致性的场景（如金融交易系统），可能会选择 CP；而对于可以容忍最终一致性的场景（如社交媒体平台），可能会选择 AP。&lt;/p&gt;
&lt;h1 id=&#34;30-线程池&#34;&gt;30. 线程池
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;线程数量的控制&lt;/li&gt;
&lt;li&gt;已经线程创建和销毁的控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-线程池有哪些状态&#34;&gt;1. 线程池有哪些状态
&lt;/h2&gt;&lt;p&gt;类比电脑关机&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正在运行-run&lt;/li&gt;
&lt;li&gt;点击关机-shutdown, 不接受任务, 处理正在运行的任务&lt;/li&gt;
&lt;li&gt;停止-stop, 不接受任务, 中断任务队列中正在进行的任务&lt;/li&gt;
&lt;li&gt;整理-所有任务已终止&lt;/li&gt;
&lt;li&gt;终止&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RUNNING：处于RUNNING状态的线程池能够接受新任务，以及对新添加的任务进行处理。&lt;/li&gt;
&lt;li&gt;SHUTDOWN(关机)：处于SHUTDOWN状态的线程池不可以接受新任务，但是可以对已添加的任务进行处理。&lt;/li&gt;
&lt;li&gt;STOP(停止)：处于STOP状态的线程池不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。&lt;/li&gt;
&lt;li&gt;TIDYING(整理)：当所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。&lt;/li&gt;
&lt;li&gt;TERMINATED(终止)：线程池彻底终止的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20240924113448256.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240924113448256&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-线程池参数&#34;&gt;2. 线程池参数
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;corePoolSize(==核心线程==)&lt;/p&gt;
&lt;p&gt;​	线程池中核心线程的数量（也称为线程池的基本大小）。当提交一个任务时，线程池会新建一个线程来执行任务，直到当前线程数等于corePoolSize。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maximumPoolSize(==最大线程数==)&lt;/p&gt;
&lt;p&gt;​	线程池中允许的最大线程数。线程池的阻塞队列满了之后，如果还有任务提交，如果当前的线程数小于maximumPoolSize，则会新建线程来执行任务。注意，如果使用的是无界队列，该参数也就没有什么效果了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keepAliveTime(==空闲的时间==)&lt;/p&gt;
&lt;p&gt;​	线程空闲的时间。线程的创建和销毁是需要代价的。==线程执行完任务后不会立即销毁，而是继续存活一段时间==：keepAliveTime。默认情况下，==该参数只有在线程数大于corePoolSize时才会生效==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unit&lt;/p&gt;
&lt;p&gt;keepAliveTime的单位。TimeUnit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;workQueue(==工作队列==)&lt;/p&gt;
&lt;p&gt;用来保存等待执行的任务的BlockQueue阻塞队列，等待的任务必须实现Runnable接口。选择如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。
LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。
PriorityBlockingQueue：具有优先级别的阻塞队列。
SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;threadFactory(==线程的创建工厂==)&lt;/p&gt;
&lt;p&gt;​	用于设置创建线程的工厂。ThreadFactory的作用就是提供创建线程的功能的线程工厂。他是通过==newThread()方法提供创建线程的功能==，newThread()方法创建的线程都是“非守护线程”而且“线程优先级都是默认优先级”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;handler(==拒绝策略==)&lt;/p&gt;
&lt;p&gt;​	RejectedExecutionHandler，线程池的拒绝策略。所谓拒绝策略，是指将任务添加到线程池中时，线程池拒绝该任务所采取的相应策略。当向线程池中提交任务时，如果此时线程池中的线程已经饱和了，而且阻塞队列也已经满了，则线程池会选择一种拒绝策略来处理该任务。&lt;/p&gt;
&lt;p&gt;线程池提供了四种拒绝策略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AbortPolicy：==直接抛出异常，默认策略==；
CallerRunsPolicy：用调用者所在的线程来执行任务；
DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；
DiscardPolicy：直接丢弃任务；
当然我们也可以实现自己的拒绝策略，例如记录日志等等，实现	接口即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-excutors-线程池&#34;&gt;3. Excutors 线程池
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;FixedThreadPool:  复用&lt;strong&gt;固定数量的线程&lt;/strong&gt;处理一个**共享的无边界队列LinkedBlockingQueue **&lt;/li&gt;
&lt;li&gt;SingleThreadExecutor: 会使用==单个工作线程==来执行一个无边界的队列, corePool和maximumPoolSize均被设置为1,  workQueue使用的是LinkedBlockingQueue&lt;/li&gt;
&lt;li&gt;CachedThreadPool:  会根据需要，==在线程可用时，重用之前构造好的池中线程==，==否则创建新线程==, 在执行==大量短周期的异步任务时, 性能较好==,   SynchronousQueue, 调用 execute 时，可以重用之前已构造的可用线程，如果不存在可用线程，那么会重新创建一个新的线程并将其加入到线程池中。如果线程超过 60 秒还未被使用，就会被中止并从缓存中移除。因此，线程池在长时间空闲后不会消耗任何资源&lt;/li&gt;
&lt;li&gt;ScheduledThreadPool  ==工作队列是DelayedWorkQueue==:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定时任务&lt;/strong&gt;：可以安排一个任务在一定的延迟之后执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;周期性任务&lt;/strong&gt;：可以安排一个任务定期执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;固定延迟&lt;/strong&gt;：在每次==执行完毕后==，等待固定的时间间隔再次执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;固定周期&lt;/strong&gt;：在每次==执行开始后==，等待固定的时间间隔再次执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程池管理&lt;/strong&gt;：可以控制线程池的大小，以及线程的创建和销毁策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-线程执行出现异常时-线程池会怎么处理&#34;&gt;4. 线程执行出现异常时, 线程池会怎么处理
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;==&lt;strong&gt;当执行方式是execute时,可以看到堆栈异常的输出&lt;/strong&gt;==。&lt;/li&gt;
&lt;li&gt;当执行方式是submit时,堆栈异常没有输出。但是调用Future.get()方法时，可以捕获到异常。&lt;/li&gt;
&lt;li&gt;不会影响线程池里面其他线程的正常执行。&lt;/li&gt;
&lt;li&gt;线程池会把这个线程移除掉，并创建一个新的线程放到线程池中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;5-线程池如何知道线程已经执行完任务&#34;&gt;5. 线程池如何知道线程已经执行完任务
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;is.isTerminated() 方法 但是需要 先用Executors.shutdown 才能拿到, 因为里面有核心线程数&lt;/li&gt;
&lt;li&gt;Executors.submit 后回得到 Future, 用 future.get 是阻塞的获取线程执行结果&lt;/li&gt;
&lt;li&gt;CountdownLatch, 思路主要是阻塞唤醒, 在执行完我们的业务的时候, countDown,  ==在主线程用await等待,当countDown为0时就会被唤醒,说明线程所有的任务已经执行完毕==&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;31-forkjoin&#34;&gt;31. ForkJoin
&lt;/h1&gt;&lt;p&gt;把==大任务分成若干个小任务, 用的是工作窃取算法==&lt;/p&gt;
&lt;p&gt;那么为什么需要使用工作窃取算法呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程和队列一一对应，比如A线程负责处理A队列里的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而在这时它们会访问同一个队列，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以为了减少窃取任务线程和被窃取任务线程之间的竞争，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而==窃取任务的线程永远从双端队列的尾部拿任务执行==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作窃取算法的优点是充分利用线程进行并行计算，并减少了线程间的竞争，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其缺点是在某些情况下还是存在竞争，比如==双端队列里只有一个任务时==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并且消耗了更多的系统资源，==比如创建多个线程和多个双端队列==。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;：我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join()操作的机制，通常情况下我们==不需要直接继承ForkJoinTask类，而只需要继承它的子类==，Fork/Join框架提供了以下两个子类：
&lt;code&gt;RecursiveAction&lt;/code&gt;：用于没有返回结果的任务。
&lt;code&gt;RecursiveTask&lt;/code&gt; ：用于有返回结果的任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt; ：ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。==当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务==。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;32-jvm-运行参数&#34;&gt;32. Jvm 运行参数
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-help&lt;/code&gt; 输出的都是标准参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-server与-client参数 , JVM会根据硬件和操作系统自动选择使用Server还是Client类型的JVM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;64位操作系统 都模式server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;server 初始堆空间会大一些，默认使用的是并行垃圾回收器，启动慢运行快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client VM相对来讲会保守一些，初始堆空间会小一些，使用串行的垃圾回收器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-X&lt;/code&gt; 查看非标准参数 &lt;code&gt;java -X&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-Xms与-Xmx参数, -Xms与-Xmx分别是设置==jvm的堆内存的初始大小和最大大小==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX&lt;/code&gt;参数也是非标准参数 , 主要用于==jvm的调优和debug操作==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean类型&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;格式：-XX:[+-]&lt;name&gt; 表示启用或禁用&lt;name&gt;属性&lt;/p&gt;
&lt;p&gt;如：-XX:+DisableExplicitGC 表示禁用手动调用gc操作，也就是说调用System.gc()无效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;非boolean类型&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;格式：-XX:&lt;name&gt;=&lt;value&gt; 表示&lt;name&gt;属性的值为&lt;value&gt;&lt;/p&gt;
&lt;p&gt;如：-XX:NewRatio=1 表示新生代和老年代的比值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看JVM 运行的参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行java命令时打印出运行参数,  加上 &lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt;就可以,  如: &lt;code&gt;java -XX:+PrintFlagsFinal -version&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 运行的java进程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jinfo -flags  &amp;lt;进程id&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;33--java-堆内存模型&#34;&gt;33.  Java 堆内存模型
&lt;/h1&gt;&lt;h2 id=&#34;1-java7&#34;&gt;1. Java7
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Young 年轻区（代）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Young区被划分为三部分，==Eden区和两个大小严格相同的Survivor区==，其中，==Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用==，在Eden区间变满的时 候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，==在经过几次垃圾收集后==，任然存活于Survivor的对象将被移动到Tenured区间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tenured 年老区&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定&lt;/p&gt;
&lt;p&gt;的次数以后，对象就会被转移到Tenured区，一般如果系统中用了application级别的缓存，缓存中&lt;/p&gt;
&lt;p&gt;的对象往往会被转移到这一区间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perm 永久区&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要保存class,method,fifiled对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-java8&#34;&gt;2. Java8
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;年轻代: Eden + 2 Survivor&lt;/li&gt;
&lt;li&gt;老年代: OldGen&lt;/li&gt;
&lt;li&gt;永久代: 被替换成了元数据空间MetaSpace , ==用的不是Jvm内存了, 在本机内存空间里面==&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么弃用&lt;/p&gt;
&lt;p&gt;==由于永久代内存经常不够用或发生内存泄露，爆出异常java.lang.OutOfMemoryError: PermGen==&lt;/p&gt;
&lt;h2 id=&#34;3-jstat-垃圾回收统计&#34;&gt;3. jstat 垃圾回收统计
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;jstat -gc &amp;lt;进程id&amp;gt; &amp;lt;间隔时间ms&amp;gt; &amp;lt;打印次数&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;S0C：第一个Survivor区的大小（KB）&lt;/p&gt;
&lt;p&gt;S1C：第二个Survivor区的大小（KB）&lt;/p&gt;
&lt;p&gt;S0U：第一个Survivor区的使用大小（KB）&lt;/p&gt;
&lt;p&gt;S1U：第二个Survivor区的使用大小（KB）&lt;/p&gt;
&lt;p&gt;EC：Eden区的大小（KB）&lt;/p&gt;
&lt;p&gt;EU：Eden区的使用大小（KB）&lt;/p&gt;
&lt;p&gt;OC：Old区大小（KB）&lt;/p&gt;
&lt;p&gt;OU：Old使用大小（KB）&lt;/p&gt;
&lt;p&gt;MC：方法区大小（KB）&lt;/p&gt;
&lt;p&gt;MU：方法区使用大小（KB）&lt;/p&gt;
&lt;p&gt;CCSC：压缩类空间大小（KB）&lt;/p&gt;
&lt;p&gt;CCSU：压缩类空间使用大小（KB）&lt;/p&gt;
&lt;p&gt;YGC：年轻代垃圾回收次数&lt;/p&gt;
&lt;p&gt;YGCT：年轻代垃圾回收消耗时间&lt;/p&gt;
&lt;p&gt;FGC：老年代垃圾回收次数&lt;/p&gt;
&lt;p&gt;FGCT：老年代垃圾回收消耗时间&lt;/p&gt;
&lt;p&gt;GCT：垃圾回收消耗总时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-jmap&#34;&gt;4. jmap
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;可以使用 Arthas的命令来替代, &lt;strong&gt;memory&lt;/strong&gt;: 获取当前 Java 虚拟机（JVM）的整体内存使用状态，包括堆内存、非堆内存以及各细分区域的使用详情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;jmap&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;-heap &amp;lt;进程id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以对内存情况 dump 到文件中, 然后使用jhat 命令配合 OQL 语句进行查询分析&lt;/p&gt;
&lt;h1 id=&#34;35-jstack&#34;&gt;35. jstack
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;jstack &amp;lt;pid&amp;gt; &lt;/code&gt;的作用是将正在运行的jvm的==线程情况进行快照==，并且打 印出来：==可以用来排查死锁==&lt;/p&gt;
&lt;p&gt;死锁: ==启动2个线程，Thread1拿到了obj1锁，准备去拿obj2锁时，obj2已经被Thread2锁定==&lt;/p&gt;
&lt;h1 id=&#34;34-设计模式-适配器和策略&#34;&gt;34. 设计模式-适配器和策略
&lt;/h1&gt;&lt;p&gt;适配器模式和策略模式的混合使用&lt;/p&gt;
&lt;p&gt;就比如说我们 , ==平台支持多种支付方式==（如信用卡、支付宝、微信支付等）。为了支持这些支付方式，你可以使用==策略模式来定义不同的支付策略==，同时==使用适配器模式来处理不同支付接口的兼容性==。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;支付策略接口&lt;/strong&gt;：定义一个支付策略接口 &lt;code&gt;PaymentStrategy&lt;/code&gt;，包含一个 &lt;code&gt;pay&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体支付策 略&lt;/strong&gt;：实现不同的支付策略，如信用卡支付、支付宝支付等  &lt;code&gt; CreditCardPayment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适配器类&lt;/strong&gt;：假设你有一个==旧的支付接口，无法直接与新的支付策略兼容==。你可以创建适配器类来适配它。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上下文类&lt;/strong&gt;：创建一个上下文类，==用于调用策略，持有一个策略对象的引用==，并可以==根据需要更换策略==。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;35-垃圾回收&#34;&gt;35. 垃圾回收
&lt;/h1&gt;&lt;h2 id=&#34;0-引用类型&#34;&gt;0. 引用类型
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;强引用:  当==对象被强引用时，垃圾回收器&lt;strong&gt;永远不会回收&lt;/strong&gt;它==，除非显式地将引用设置为&lt;code&gt;null&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;软引用:  JVM在==内存不足时会回收软引用指向的对象==，但在内存充足时不会回收这些对象。&lt;/li&gt;
&lt;li&gt;弱引用:  弱引用对象在垃圾回收时会被&lt;strong&gt;立即回收&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;虚引用:  虚引用的对象并不会直接被程序使用，主要用于&lt;strong&gt;跟踪对象的垃圾回收&lt;/strong&gt;。  适合需要释放资源的场景，例如文件、网络连接等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1垃圾回收算法&#34;&gt;1.垃圾回收算法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引用计数法
&lt;ul&gt;
&lt;li&gt;在对象中存储一个计数器用来记录被引用次数，当产生一个引用关系，计数+1，当一个引用关系失效计数-1，如果减到0，就将当前对象清除&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;实时&lt;/li&gt;
&lt;li&gt;区域性，不会造成GC停顿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;会比较消耗cpu，在不断的计算引用计数和进行gc&lt;/li&gt;
&lt;li&gt;循环引用问题无法解决（&lt;strong&gt;致命缺点&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;如果两个对象互相引用，如果指针指向null，对象的引用计数仍然不为0，所以不会被移除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标记清除法
&lt;ul&gt;
&lt;li&gt;从根节点开始标记可达对象，将不可达的对象清空&lt;/li&gt;
&lt;li&gt;分为两个阶段
&lt;ul&gt;
&lt;li&gt;标记&lt;/li&gt;
&lt;li&gt;清除&lt;/li&gt;
&lt;li&gt;两个阶段都会造成GC停顿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：解决引用计数法循环引用的问题&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;会造成比较长的GC停顿时间&lt;/li&gt;
&lt;li&gt;清理之后内存空间是不连续的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标记压缩法
&lt;ul&gt;
&lt;li&gt;和标记清除法十分类似，在清理阶段不太一样&lt;/li&gt;
&lt;li&gt;一边清理，一边压缩，将存活对象压缩到内存的一端，保证空闲的内存空间是连续的&lt;/li&gt;
&lt;li&gt;优点：解决了标记清除法的碎片化问题&lt;/li&gt;
&lt;li&gt;缺点：由于标记和清除阶段都需要GC停顿，会造成比较长的GC停顿时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复制算法
&lt;ul&gt;
&lt;li&gt;将内存划分为两块完全相等的空间，当gc的时候将一块空间中的存活对象复制转移到另一块空间，保证始终至少有一个空间是空闲的&lt;/li&gt;
&lt;li&gt;在年轻代使用复制算法，年轻代的两个Survivor区命名为form区和to区，每次将form区和Eden区的存活对象复制拷贝到to区，转化from和to的角色。&lt;/li&gt;
&lt;li&gt;当内存中的垃圾对象较多的时候，只需要复制转移少量的对象，适合使用复制算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分代收集算法
&lt;ul&gt;
&lt;li&gt;将内存划分为多个区域，根据对象的特点进行区分，不同的区域使用不同的垃圾回收算法&lt;/li&gt;
&lt;li&gt;年轻代：存储刚被创建的和大概率可回收的对象，适合使用复制算法&lt;/li&gt;
&lt;li&gt;老年代：大概率不可回收对象，适合使用标记清除/标记压缩算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三色标记算法
&lt;ul&gt;
&lt;li&gt;白色: 未被扫描的对象&lt;/li&gt;
&lt;li&gt;黑色: 已扫描且存活对象&lt;/li&gt;
&lt;li&gt;灰色: 已扫描, 自身是存活的, 但器引用对象存活情况发需要进一步扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2垃圾收集器&#34;&gt;2.垃圾收集器
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;串行垃圾收集器
&lt;ul&gt;
&lt;li&gt;使用单线程进行垃圾回收&lt;/li&gt;
&lt;li&gt;-XX:+UseSerialGC设置年轻代和老年代都使用串行垃圾收集器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并行垃圾收集器  Parallel GC
&lt;ul&gt;
&lt;li&gt;使用多线程进行垃圾回收&lt;/li&gt;
&lt;li&gt;ParNew垃圾收集器
&lt;ul&gt;
&lt;li&gt;运行在年轻代的，老年代仍然使用串行垃圾收集器&lt;/li&gt;
&lt;li&gt;通过-XX:+UseParNewGC进行设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==ParallelGC垃圾收集器（jdk8默认垃圾收集器）==
&lt;ul&gt;
&lt;li&gt;通过-XX:+UseParallelGC设置在&lt;strong&gt;年轻代&lt;/strong&gt;使用ParallelGC&lt;/li&gt;
&lt;li&gt;通过-XX:+UseParallelOldGC设置在&lt;strong&gt;老年代&lt;/strong&gt;使用ParallelGC&lt;/li&gt;
&lt;li&gt;可以通过设置一些参数让jvm自动调整堆空间的分配
&lt;ul&gt;
&lt;li&gt;-XX:MaxGCPauseMillis=&amp;gt;示最大允许的GC停顿时间&lt;/li&gt;
&lt;li&gt;-XX:GCTimeRatio=&amp;gt;表示程序占运行时间的百分比默认99，表示程序运行时间占总时间的99%，1%是垃圾回收时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-XX:+UseAdaptiveSizePolicy&lt;/strong&gt;  设置为true表示开启自适应模式，让jvm自动调整达到gc和程序执行的平衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMS (==低停顿的==)垃圾收集器&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241203183845386.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241203183845386&#34;
	
	
&gt;
&lt;ul&gt;
&lt;li&gt;在老年代使用的垃圾收集器在jdk8默认是关闭的,需要手动开启&lt;/li&gt;
&lt;li&gt;在标记清除法的基础上进行优化
&lt;ul&gt;
&lt;li&gt;初始&lt;strong&gt;标记根节点&lt;/strong&gt;：造成STW&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发标记&lt;/strong&gt;：在运行的同时标记可达对象&lt;/li&gt;
&lt;li&gt;预处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;再标记&lt;/strong&gt;：造成STW，标记在并行过程中遗漏的对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发清理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;调整堆大小：清除内存碎片&lt;/li&gt;
&lt;li&gt;并发重置状态等待下次CMS的触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结：这种方式造成STW只有两个阶段（标记根节点和再标记），消耗的时间小于标记清除法两个阶段的时间，所以造成GC停顿时间比较短，效率比较高，但是没办法清理掉所有垃圾，这种方式是在&lt;strong&gt;清理所有垃圾和响应时间上做出的权衡&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通过参数-XX:+UseConcMarkSweepGC进行设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G1垃圾收集器（重点）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;摒弃了传统的堆内存的划分而是使用了若干个大小相同的Region区域，这些区域分为4个
&lt;ul&gt;
&lt;li&gt;Eden:保存新创建的对象&lt;/li&gt;
&lt;li&gt;Survivor：保存年轻代GC之后存活的对象&lt;/li&gt;
&lt;li&gt;Old：
&lt;ul&gt;
&lt;li&gt;保存多次年轻代GC之后仍然存活的对象&lt;/li&gt;
&lt;li&gt;保存年轻代Surviovr存满之后转移过来的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Humongous
&lt;ul&gt;
&lt;li&gt;保存超过Region的50%大小的对象==（巨型对象）超过2mb==，如果一个区存不下，寻找连续的Humongous区进行存储，如果找不到进行FULLGC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;精髓就是它的&lt;strong&gt;所有空间都是浮动的，不是固定的，是一个动态平衡，需要就用，不需要就归还&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;记忆集合Remembered Set
&lt;ul&gt;
&lt;li&gt;将Region以512kb一个card划分为若干个card&lt;/li&gt;
&lt;li&gt;每一个card都存在一个集合用来保存被引用的card位置&lt;/li&gt;
&lt;li&gt;当GC时需要定位根节点的时候，只需要扫描记忆集合中记录的card的位置就能快速找到根节点，不需要扫描整个内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GC
&lt;ul&gt;
&lt;li&gt;YoungGC：年轻代的GC&lt;/li&gt;
&lt;li&gt;MixedGC：年轻代的GC+部分老年代GC
&lt;ul&gt;
&lt;li&gt;触发条件：-XX:InitiatingHeapOccupancyPercent=n
&lt;ul&gt;
&lt;li&gt;当前老年代占堆空间的n%就触发MixedGC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局并发标记（和cms标记阶段比较类似）
&lt;ul&gt;
&lt;li&gt;标记根节点
&lt;ul&gt;
&lt;li&gt;遍历记忆集合中记录的card位置找到根节点进行初始化标记&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并发标记老年代中的节点&lt;/li&gt;
&lt;li&gt;并发标记所有堆内存的节点&lt;/li&gt;
&lt;li&gt;重新标记（会导致STW）&lt;/li&gt;
&lt;li&gt;预清理
&lt;ul&gt;
&lt;li&gt;并没有真的清理而是在第二个阶段开始清理，主要是检查过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复制转移对象
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全程STW，将标记对象复制转移到另一块Region，并情空当前Region&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FULLGC：所有内存空间包括Humongous进行GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用过程
&lt;ul&gt;
&lt;li&gt;开启g1
&lt;ul&gt;
&lt;li&gt;-XX:+UseG1GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置最大堆内存
&lt;ul&gt;
&lt;li&gt;-Xmx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调优参数的设置
&lt;ul&gt;
&lt;li&gt;-XX:MaxGCPauseMillis=&amp;gt;所能允许的最大gc停顿时间，需要反复调整达到最佳gc情况&lt;/li&gt;
&lt;li&gt;-XX:G1HeapRegionSize=&amp;gt;Region区域大小，默认是堆内存的1/2000，设置范围是1-32m&lt;/li&gt;
&lt;li&gt;-XX:ParallelGCThreads=n =&amp;gt;工作线程的数量，默认是cpu核数，最大是8&lt;/li&gt;
&lt;li&gt;-XX:ConcGCThreads=n =&amp;gt;并发标记的线程数量，一般是ParallelGCThreads的1/4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相比于CMS来说
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标记根节点的时间短了&lt;/strong&gt;，因为不需要扫描整个堆空间，只需要&lt;strong&gt;通过记忆集合扫描几个card&lt;/strong&gt;就行了，意味着STW时间变短了，程序响应速度变快了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cms有一个整理碎片的过程，G1不需要整理，因为它是复制算&lt;/strong&gt;法，而且使用mixedGC只会每次收集几个老年代，意味着每次mixedGC只需要复制转移少量的对象，所以效率很高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;垃圾回收器, 不外乎就两个功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标记垃圾
&lt;ol&gt;
&lt;li&gt;引用计数法&lt;/li&gt;
&lt;li&gt;可达性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;清理垃圾
&lt;ol&gt;
&lt;li&gt;标记清除&lt;/li&gt;
&lt;li&gt;标记整理&lt;/li&gt;
&lt;li&gt;复制&lt;/li&gt;
&lt;li&gt;分代收集&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;36-threadlocal&#34;&gt;36. ThreadLocal
&lt;/h1&gt;&lt;p&gt;允许==每个线程存储和访问独立的变量副本, 适用于线程隔离的场景==&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt; 变量==通常由线程的生命周期管理==，并存储在 &lt;code&gt;Thread&lt;/code&gt; 对象的内部数据结构中，通常是 &lt;code&gt;ThreadLocalMap&lt;/code&gt;。每个线程在使用 &lt;code&gt;ThreadLocal&lt;/code&gt; 时，都会创建一个专属于该线程的变量副本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;潜在的内存泄漏风险&lt;/strong&gt;出现在以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ThreadLocalMap&lt;/code&gt; ==使用弱引用（weak reference）来引用 &lt;code&gt;ThreadLocal&lt;/code&gt; 对象本身==，但它对==&lt;code&gt;ThreadLocal&lt;/code&gt; 变量值==使用的是&lt;strong&gt;强引用&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;/strong&gt;：&lt;code&gt;ThreadLocal&lt;/code&gt; 对象本身作为 &lt;code&gt;key&lt;/code&gt;，但 &lt;code&gt;ThreadLocalMap&lt;/code&gt; 对这个 &lt;code&gt;key&lt;/code&gt; 的引用是一个&lt;strong&gt;弱引用（WeakReference）&lt;/strong&gt;。这意味着，==如果没有其他强引用指向这个 &lt;code&gt;ThreadLocal&lt;/code&gt; 对象，JVM 的垃圾回收器会回收这个 &lt;code&gt;ThreadLocal&lt;/code&gt; 对象==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;/strong&gt;：&lt;code&gt;value&lt;/code&gt; 是线程使用 &lt;code&gt;ThreadLocal&lt;/code&gt; 存储的变量值，&lt;code&gt;ThreadLocalMap&lt;/code&gt; 对这些变量值使用的是&lt;strong&gt;强引用&lt;/strong&gt;。因此，只要线程不结束，&lt;code&gt;ThreadLocalMap&lt;/code&gt; 会继续持有这些值，即使 &lt;code&gt;ThreadLocal&lt;/code&gt; 对象本身已经被回收。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果一个 &lt;code&gt;ThreadLocal&lt;/code&gt; 被手动设置为 &lt;code&gt;null&lt;/code&gt; 或者不再被使用，那么这个 &lt;code&gt;ThreadLocal&lt;/code&gt; 对象会被垃圾回收。但对应的变量副本（value）可能仍然存在于 &lt;code&gt;ThreadLocalMap&lt;/code&gt; 中，且这个副本与线程的生命周期绑定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于 &lt;code&gt;ThreadLocalMap&lt;/code&gt; 持有对这些值的强引用，即使 &lt;code&gt;ThreadLocal&lt;/code&gt; 对象被垃圾回收，值仍然不会被回收，导致内存泄漏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果用了线程池, ThreadLocal会随着线程的回收被销毁, 但是线程一直存活的话, 内存泄漏会随着时间推移越来越严重&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==&lt;code&gt;ThreadLocal&lt;/code&gt;静态和成员变量的影响==：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;static ThreadLocal&lt;/code&gt;&lt;/strong&gt;：因为 &lt;code&gt;static&lt;/code&gt; 变量属于类，所以所有线程共享同一个 &lt;code&gt;ThreadLocal&lt;/code&gt; 变量，但由于 &lt;code&gt;ThreadLocal&lt;/code&gt; 为每个线程维护一个独立的值，这些线程各自有不同的值，而不是共享同一个值。这种方式适合所有对象实例都需要访问相同的线程本地变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员变量 &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/strong&gt;：成员变量属于每个实例，所以每个对象实例都有自己的 &lt;code&gt;ThreadLocal&lt;/code&gt; 变量和独立的线程本地值。这意味着不同的对象实例彼此独立，线程在操作时不会共享线程本地数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;37-fail-safe-和-fail-fast&#34;&gt;37. fail-safe 和 fail-fast
&lt;/h1&gt;&lt;p&gt;两种迭代器的行为模式，用于描述在并发修改集合时如何处理异常。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fail-fast: 当使用迭代器遍历集合时，如果在遍历过程中检测到集合被修改抛出异常ConcurrentModificationException , 非并发安全的集合, hashMap, arrayList&lt;/li&gt;
&lt;li&gt;Fail-safe:  迭代器在遍历集合时不会抛出异常，即使集合被并发修改。 遍历时==使用集合的&lt;strong&gt;副本&lt;/strong&gt;==（例如通过 &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; 或 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;）来实现的，因此修改不会影响当前的迭代过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;38-异常类型&#34;&gt;38. 异常类型
&lt;/h1&gt;&lt;p&gt;Java的异常类型层次结构是基于继承自 &lt;code&gt;Throwable&lt;/code&gt; 类的。&lt;code&gt;Throwable&lt;/code&gt; 主要分为两大子类：==&lt;code&gt;Error&lt;/code&gt; 和 &lt;code&gt;Exception&lt;/code&gt;==，其中 &lt;code&gt;Exception&lt;/code&gt; 再分为&lt;strong&gt;受检异常&lt;/strong&gt;和&lt;strong&gt;非受检异常&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;受检异常：编译时必须处理的异常，继承自 Exception 类（不包括 RuntimeException）。
例子：IOException、SQLException 需要显式捕获或通过 throws 声明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非受检异常：编译时不强制处理的异常，继承自 RuntimeException。
例子：NullPointerException、ArithmeticException由运行时错误或逻辑错误引发，不强制处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;39-代理&#34;&gt;39. 代理
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;静态代理实现较简单，只要==代理对象对目标对象进行包装，即可实现增强功能==，但静态代理只能为一个目标对象服务，如果目标对象过多，则会产生很多代理类。&lt;/li&gt;
&lt;li&gt;JDK动态代理需要目标对象实现业务接口，代理类只需实现InvocationHandler接口。&lt;/li&gt;
&lt;li&gt;动态代理生成的类为 lass com.sun.proxy.$Proxy4，cglib代理生成的类为class com.cglib.UserDao$$EnhancerByCGLIB$$552188b6。&lt;/li&gt;
&lt;li&gt;静态代理在编译时产生class字节码文件，可以直接使用，效率高。&lt;/li&gt;
&lt;li&gt;动态代理必须实现InvocationHandler接口，通过反射代理方法，比较消耗系统性能，但可以减少代理类的数量，使用更灵活。&lt;/li&gt;
&lt;li&gt;cglib代理无需实现接口，通过生成类字节码实现代理，比反射稍快，不存在性能问题，但cglib会继承目标对象，需要重写方法，所以目标对象不能为final类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;动态代理是什么, ==运行时创建代理对象并处理方法调用的一种机制,只是对原始实现的拦截去做功能的增强==&lt;/p&gt;
&lt;p&gt;==JDK的动态代理是通过 java.lang.reflect.Proxy 类和 InvocationHandler 接口来实现的==。Proxy 类负责创建代理对象，InvocationHandler 接口负责定义代理对象中方法调用时的行为。&lt;/p&gt;
&lt;p&gt;Jdk动态代理关键步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代理对象的创建 ：
使用 Proxy.newProxyInstance() 方法创建代理对象(==继承Proxy类的==)。这个方法要求代理的类必须实现一个或多个接口，==因为代理对象最终是通过实现接口来代理原始对象的方法调用==。&lt;/li&gt;
&lt;li&gt;方法调用的拦截：
当调用代理对象的方法时，代理对象会将这个==调用转发给 InvocationHandler.invoke() 方法==。在这个方法里，可以自定义逻辑，拦截并处理实际方法的执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-为什么只能代理有接口的类&#34;&gt;1. 为什么只能代理有接口的类?
&lt;/h2&gt;&lt;p&gt;JDK动态代理不能代理没有实现接口的类，==因为代理机制依赖接口==，而不是单继承的限制。&lt;/p&gt;
&lt;p&gt;因为它依赖于接口的存在，==通过代理对象实现接口来拦截方法调用==。&lt;/p&gt;
&lt;h2 id=&#34;2-cglib-是怎么实现的&#34;&gt;2. cglib 是怎么实现的
&lt;/h2&gt;&lt;p&gt;==通过生成目标类的子类来拦截方法调用==。CGLIB（Code Generation Library）是一种==基于字节码的动态代理技术==，广泛用于框架中（如 Spring）来对类进行代理，尤其是当目标类没有实现接口时。&lt;/p&gt;
&lt;p&gt;如 Spring 中的 AOP（面向切面编程）在某些情况下（目标类没有实现接口时）会使用 CGLIB 代理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法代理 &lt;code&gt;final&lt;/code&gt; 类和 &lt;code&gt;final&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：CGLIB 的性能通常较好，但因为它==生成代理类时需要进行字节码操作==&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;40-对象的创建过程&#34;&gt;40. 对象的创建过程
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;类加载:  加载目标类（如果尚未加载）
&lt;ol&gt;
&lt;li&gt;加载: 通过类加载器将&lt;code&gt;class&lt;/code&gt;文件加载到内存中, 生成Class对象&lt;/li&gt;
&lt;li&gt;链接:
&lt;ol&gt;
&lt;li&gt;验证: 类文件格式是否正确, 字节码是否符合规范&lt;/li&gt;
&lt;li&gt;准备: 为静态变量分配内存, 初始化默认值&lt;/li&gt;
&lt;li&gt;解析:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;初始化: 对静态变量赋初始值, 执行静态代码块&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;内存分配:  在堆内存中为新对象分配空间&lt;/li&gt;
&lt;li&gt;对象初始化:  执行默认初始化、显式初始化和构造器初始化&lt;/li&gt;
&lt;li&gt;返回引用:  &lt;code&gt;new&lt;/code&gt; 返回对象的引用，允许外部访问该对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;41--new-stringabc-创建了几个对象&#34;&gt;41.  new String(abc) 创建了几个对象
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接使用字面量 &amp;ldquo;abc&amp;rdquo;&lt;/strong&gt;： 当你使用 &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt; 这种字面量形式时，Java 会将其放入字符串常量池中。如果在代码的其他地方也使用了相同的字面量 &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;，JVM 会复用同一个字符串对象，而不会创建新的对象。这种方式提高了效率和内存利用率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;new String(&amp;quot;abc&amp;quot;)&lt;/code&gt;&lt;/strong&gt;： 当你使用 &lt;code&gt;new String(&amp;quot;abc&amp;quot;)&lt;/code&gt; 时，它会显式地创建一个新的 &lt;code&gt;String&lt;/code&gt; 对象，且该对象不在字符串常量池中，而是在堆内存中。这意味着即使内容相同，使用 &lt;code&gt;new String(&amp;quot;abc&amp;quot;)&lt;/code&gt; 创建的对象与常量池中的字符串是两个不同的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两种可能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;==常量池里已经存在abc, 就只会创建一个, 不存在就会创建 String 实例对象和 &amp;lsquo;abc&amp;rsquo; 常量==&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;42-string--string-buffer-string-builder&#34;&gt;42. String , String Buffer, String Builder
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;可变性: String 不可变, 其余两个都是可变的&lt;/li&gt;
&lt;li&gt;线程安全: String Buffer用了sync,  StringBuilder 不是线程安全的&lt;/li&gt;
&lt;li&gt;性能: String Builder是性能最高的, 字符串拼接编译器会帮我们优化,  String Buffer其次,String 是最低&lt;/li&gt;
&lt;li&gt;存储: String 在常量池, 其他都在堆内存空间&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;43-integer-相等判断&#34;&gt;43. Integer 相等判断
&lt;/h1&gt;&lt;p&gt;包装类型,  因为引入了享元模式, 就是缓存: -127到128 , 如果值在这个区间就会直接从缓存中获取==Integer这样一个实例==, 会出现明明是值相同, 但是== 比较却为false, 因为 比较的是内存地址&lt;/p&gt;
&lt;h1 id=&#34;44-深拷贝-浅拷贝&#34;&gt;44. 深拷贝, 浅拷贝
&lt;/h1&gt;&lt;p&gt;这个是对象复制场景&lt;/p&gt;
&lt;p&gt;深拷贝会在堆内存空间创建一个新的对象, 引用指针指向这个新对象&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要继承Cloneable 接口, 重写clone 方法,&lt;/li&gt;
&lt;li&gt;实现序列化接口, 有很多工具类可以使用来进行深拷贝&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;浅拷贝是只拷贝了指针, 都是指向的堆内存里面的同一个内存地址&lt;/p&gt;
&lt;h1 id=&#34;45-java文件拷贝方式&#34;&gt;45. Java文件拷贝方式
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;IO包里面的 FileInputStream 和 FileOutputStream&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nio的 Files 类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nio 的&lt;code&gt;transferTo()&lt;/code&gt; 和 &lt;code&gt;transferFrom()&lt;/code&gt; 方法可以实现&lt;strong&gt;零拷贝&lt;/strong&gt;（Zero-Copy） ,  ==避免了将数据在&lt;strong&gt;内核空间&lt;/strong&gt;和&lt;strong&gt;用户空间&lt;/strong&gt;之间来回拷贝==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允许直接将文件内容从一个通道传输到另一个通道（如文件到网络或反之），而无需将数据复制到用户空间（Java 应用的内存空间）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;46-零拷贝&#34;&gt;46. 零拷贝
&lt;/h1&gt;&lt;p&gt;零拷贝的工作流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核空间读取文件的数据块（数据位于内核文件缓存中）。&lt;/li&gt;
&lt;li&gt;直接将数据传输到网络通道或目标文件的内核缓冲区中，无需拷贝到用户空间。&lt;/li&gt;
&lt;li&gt;网络通道或目标文件通道将数据写入目标（如磁盘或网络）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;47-设计模式&#34;&gt;47. 设计模式
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;创建型模式&lt;/strong&gt;：负责对象的创建，帮助解耦对象的实例化过程，如==单例模式、工厂模式和原型模式==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结构型模式&lt;/strong&gt;：用于处理类和对象之间的关系，促进代码的可扩展性和模块化，如==装饰器模式、适配器模式和代理模式==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为型模式&lt;/strong&gt;：专注于对象之间的交互和职责分配，如==观察者模式、策略模式和命令模式, 责任链==。&lt;/p&gt;
&lt;p&gt;Spring 解决循环依赖主要使用了 &lt;strong&gt;代理模式&lt;/strong&gt;（Proxy Pattern）和 &lt;strong&gt;工厂模式&lt;/strong&gt;（Factory Pattern）。&lt;/p&gt;
&lt;p&gt;具体实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;代理模式&lt;/strong&gt;：在 Spring 中，==当检测到循环依赖时，它会创建一个代理对象而不是直接返回原始对象==。这个代理对象可以==在后续需要时引用实际的对象，从而打破循环依赖==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;：Spring 使用 &lt;code&gt;BeanFactory&lt;/code&gt; 来管理 Bean 的生命周期。在创建 Bean 的过程中，如==果遇到循环依赖，Spring 会通过工厂方法先返回一个代理对象，等到真正需要该 Bean 的时候再去注入依赖的实例==。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工作流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 Spring 检测到 A 和 B 之间存在循环依赖时，首先创建 A 的代理对象，并将其注入到 B 中。&lt;/li&gt;
&lt;li&gt;然后，Spring 再继续创建 B 的实例并注入 A 的代理对象。&lt;/li&gt;
&lt;li&gt;当真正需要 A 的时候，代理会被替换为实际的 A 实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方式使得 Spring 能够有效地处理循环依赖问题，同时保持了松耦合和高内聚的设计原则。&lt;/p&gt;
&lt;h2 id=&#34;1-单例模式&#34;&gt;1. 单例模式
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;私有构造方法&lt;/li&gt;
&lt;li&gt;提供静态方法
&lt;ol&gt;
&lt;li&gt;在多线程的时候可以使用静态代码块, 或者饿汉式加载,&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;或者可以使用枚举来实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-策略模式&#34;&gt;2. 策略模式
&lt;/h2&gt;&lt;p&gt;==可拓展, 易于维护, 动态选择==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Context（上下文）&lt;/strong&gt;：==持有对某个策略的引用，并负责调用该策略的算法==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strategy（策略接口）&lt;/strong&gt;：定义一个统一的接口，用于所有支持的算法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConcreteStrategy（具体策略类）&lt;/strong&gt;：实现策略接口，提供具体的算法实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-观察者模式&#34;&gt;3. 观察者模式
&lt;/h2&gt;&lt;p&gt;==低耦合, 动态关系, 广播通信==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Subject（主题）&lt;/strong&gt;：被观察者，管理观察者的注册和通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observer（观察者接口）&lt;/strong&gt;：定义一个更新接口，用于接收主题的通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ConcreteObserver（具体观察者类）&lt;/strong&gt;：实现观察者接口，并在接收到通知时更新自己。&lt;/p&gt;
&lt;h1 id=&#34;4-责任链模式&#34;&gt;4. 责任链模式
&lt;/h1&gt;&lt;p&gt;==降低耦合性 ,  增强灵活性  简化代码==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handler（处理者接口）&lt;/strong&gt;：定义一个处理请求的方法，并包含对下一个处理者的引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ConcreteHandler（具体处理者类）&lt;/strong&gt;：实现处理者接口，负责处理请求。如果自己无法处理请求，则将其转发给链中的下一个处理者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client（客户端）&lt;/strong&gt;：发送请求的对象，通常只与链的起始处理者交互。&lt;/p&gt;
&lt;p&gt;==假设我们有一个审批流程，涉及多个级别的审批（如经理、总监和CEO），每个级别都可以处理不同金额的请求==&lt;/p&gt;
&lt;h1 id=&#34;48-finally-块一定会执行吗&#34;&gt;48. finally 块一定会执行吗
&lt;/h1&gt;&lt;p&gt;不一定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;捕获范围不够大, 没进到try 的代码块里面,就异常退出是不会执行的&lt;/li&gt;
&lt;li&gt;在try catch 里面 用了 System.exit() 也不会执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;49--raft-算法&#34;&gt;49.  Raft 算法
&lt;/h1&gt;&lt;p&gt;分布式系统中的一致性算法,  多个节点（或服务器）在面对节点故障或网络分区时，==能够一致地维护一份数据副本==。&lt;/p&gt;
&lt;h2 id=&#34;1-重要组件&#34;&gt;1. 重要组件
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;领导者（Leader）&lt;/strong&gt;：Raft 中的节点通过选举形成一个领导者，所有写入操作都通过领导者进行。领导者负责处理客户端的请求并将数据复制到其他节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跟随者（Follower）&lt;/strong&gt;：除了领导者，其他节点都是跟随者，==负责响应领导者的请求和转发数据==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;候选者（Candidate）&lt;/strong&gt;：在领导者失效时，节点可以转变为候选者，发起选举以选出新的领导者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-工作流程&#34;&gt;2. &lt;strong&gt;工作流程&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选举过程&lt;/strong&gt;：如果一个节点在一定时间内未接收到领导者的心跳信号，它会转变为候选者并开始选举。在选举中，节点通过投票选出新的领导者，确保在集群中始终有一个活跃的领导者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志复制&lt;/strong&gt;：==领导者将接收到的客户端请求以日志条目的形式保存==，并将其复制到所有跟随者。如果==大多数节点（多数决）确认接收，领导者会提交这些日志条目==，并通知跟随者更新状态机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态机应用&lt;/strong&gt;：所有节点（包括领导者和跟随者）在接收到提交的日志条目后，会将其应用于各自的状态机，从而保证状态的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;50-spi&#34;&gt;50. SPI
&lt;/h1&gt;&lt;p&gt;Service provider interface ==基于接口的动态拓展机制==,  广泛应用于 Java 和其他编程语言中 ,  它允许在不修改现有代码的情况下，==动态地加载和使用服务实现==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解耦&lt;/strong&gt;：SPI 提供了一种方式，让接口和其实现可以分开管理，从而实现灵活的替换和扩展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态加载&lt;/strong&gt;：==通过使用反射和配置文件，SPI 允许在运行时动态加载服务的实现==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插件式架构&lt;/strong&gt;：SPI 支持插件机制，允许开发者在不修改核心代码的情况下，添加新的功能或实现。&lt;/p&gt;
&lt;p&gt;实现步骤&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义接口&lt;/strong&gt;：首先，定义一个服务接口（API），该接口提供了一组功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现接口&lt;/strong&gt;：然后，创建一个或多个实现该接口的类（服务提供者）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置文件&lt;/strong&gt;：在 &lt;code&gt;META-INF/services/&lt;/code&gt; 目录下，创建一个以接口全名命名的文件，文件内容是实现类的全名。JAR 包中的所有实现类都会被列在这个文件中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加载实现&lt;/strong&gt;：使用 &lt;code&gt;ServiceLoader&lt;/code&gt; 类，可以在运行时查找并加载实现类。例如&lt;/p&gt;
&lt;h1 id=&#34;51--包装类和基础数据类型&#34;&gt;51.  包装类和基础数据类型
&lt;/h1&gt;&lt;p&gt;short  int long double float byte char boolean&lt;/p&gt;
&lt;p&gt;==内存==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型：存储在栈内存中，效率高，分配和释放速度快。&lt;/li&gt;
&lt;li&gt;包装类：存储在堆内存中，创建对象需要更多的内存和处理时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==用途==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型：用于处理简单的数值、字符和布尔值，适合对性能要求较高的场景。&lt;/li&gt;
&lt;li&gt;包装类：用于需要对象的场景，如集合（&lt;code&gt;ArrayList&lt;/code&gt;、&lt;code&gt;HashMap&lt;/code&gt; 等）、泛型等，因为这些集合只能存储对象，而不能存储基本类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==功能==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型：不提供任何方法或功能，简单存储值。&lt;/li&gt;
&lt;li&gt;包装类：提供了一些方法，可以进行类型转换、比较、转换为字符串等。例如：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Integer.parseInt(String s)&lt;/code&gt;：将字符串转换为 &lt;code&gt;int&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Integer.valueOf(int i)&lt;/code&gt;：将 &lt;code&gt;int&lt;/code&gt; 转换为 &lt;code&gt;Integer&lt;/code&gt; 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;52--equal-hashcode&#34;&gt;52.  equal, hashCode
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt; 在 Java 中，当你重写 `equals()` 方法时，必须同时重写 `hashCode()` 方法，原因主要与==哈希表（如 `HashMap`、`HashSet`）的工作机制==有关 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	  &lt;code&gt;hashCode()&lt;/code&gt; 方法返回对象的哈希码，==它是一个整数，通常是对象的一种唯一标识==。哈希码的计算通常基于对象的属性。&lt;/p&gt;
&lt;p&gt;​	  重写 &lt;code&gt;equals()&lt;/code&gt; 方法后重写 &lt;code&gt;hashCode()&lt;/code&gt; 方法是==为了确保对象在哈希表中正常工作，维护它们之间的一致性==。这是 Java 的规范，确保了集合框架（如 &lt;code&gt;HashSet&lt;/code&gt; 和 &lt;code&gt;HashMap&lt;/code&gt;）能正确处理对象的查找和存储。&lt;/p&gt;
&lt;h1 id=&#34;53-集合&#34;&gt;53. 集合
&lt;/h1&gt;&lt;p&gt;时间复杂度:  用于描述算法在执行时所需的时间与输入规模之间的关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(1)&lt;/strong&gt;：常数时间复杂度，不受输入规模影响。操作时间固定，例如数组元素访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(log n)&lt;/strong&gt;：对数时间复杂度，通常出现在每次操作都将问题规模减半的算法中，例如二分查找。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(n)&lt;/strong&gt;：线性时间复杂度，算法的执行时间与输入规模成正比，例如遍历数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(n log n)&lt;/strong&gt;：线性对数时间复杂度，常见于高效的排序算法，如归并排序和快速排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(n²)&lt;/strong&gt;：平方时间复杂度，通常出现在嵌套循环的算法中，例如冒泡排序和选择排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(2^n)&lt;/strong&gt;：指数时间复杂度，算法执行时间随输入规模呈指数增长，例如某些递归算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O(n!)&lt;/strong&gt;：阶乘时间复杂度，通常出现在排列组合问题中，如旅行商问题的暴力解法。&lt;/p&gt;
&lt;h2 id=&#34;0-算法&#34;&gt;0. 算法
&lt;/h2&gt;&lt;p&gt;冒泡排序:  比较相邻元素并交换它们的位置，如果它们的顺序错误 , ==每一轮最大的数已经被排到了最后==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为什么不是 &lt;code&gt;size&lt;/code&gt; 次？&lt;/strong&gt; 当第 &lt;code&gt;size - 1&lt;/code&gt; 次循环结束时，数组中已经有 &lt;code&gt;size - 1&lt;/code&gt; 个元素被放置到了正确的位置，因此最后一个元素自然也是正确的，无需再进行额外的循环。  对于一个大小为 &lt;code&gt;6&lt;/code&gt; 的数组，最多只需要 5 次外循环：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为什么是 &lt;code&gt;size - 1 - i&lt;/code&gt;？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size - 1&lt;/code&gt; 是在数组中进行比较的总次数（因为数组索引从 &lt;code&gt;0&lt;/code&gt; 开始，所以是 &lt;code&gt;size - 1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;减去 &lt;code&gt;i&lt;/code&gt; 是因为经过 &lt;code&gt;i&lt;/code&gt; 轮外循环，数组的最后 &lt;code&gt;i&lt;/code&gt; 个元素已经排好序了，因此在接下来的循环中无需再比较这些元素。&lt;/li&gt;
&lt;li&gt;例如：
&lt;ul&gt;
&lt;li&gt;在第 1 轮（i = 0），你需要遍历整个数组，所以内循环次数是 &lt;code&gt;size - 1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在第 2 轮（i = 1），你只需要比较前 &lt;code&gt;size - 2&lt;/code&gt; 个元素，因为最后一个元素已经排好序；&lt;/li&gt;
&lt;li&gt;依此类推，直到最后只剩一个元素需要比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class BubbleSort {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public static void bubbleSort(int[] arr) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int n = arr.length;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for (int i = 0; i &amp;lt; n - 1; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 标志位，用于检测是否发生了交换
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            boolean swapped = false; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            for (int j = 0; j &amp;lt; n - 1 - i; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                if (arr[j] &amp;gt; arr[j + 1]) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    // 交换 arr[j] 和 arr[j + 1]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    int temp = arr[j];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    arr[j] = arr[j + 1];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    arr[j + 1] = temp;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    swapped = true;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 如果没有发生交换，说明数组已经有序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            if (!swapped) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                break;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public static void main(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int[] arr = {64, 34, 25, 12, 22, 11, 90};
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        bubbleSort(arr);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        System.out.println(&amp;#34;Sorted array: &amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for (int num : arr) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            System.out.print(num + &amp;#34; &amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;快速排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class QuickSort {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public static void quickSort(int[] arr, int low, int high) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if (low &amp;lt; high) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 获取划分点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            int pi = partition(arr, low, high);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 递归排序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            quickSort(arr, low, pi - 1);  // 对左侧进行排序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            quickSort(arr, pi + 1, high); // 对右侧进行排序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public static int partition(int[] arr, int low, int high) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int pivot = arr[high]; // 选择最后一个元素作为基准
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int i = (low - 1); // 小于基准的元素索引
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for (int j = low; j &amp;lt; high; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 如果当前元素小于或等于基准
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            if (arr[j] &amp;lt;= pivot) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                i++; // 增加小于基准的元素索引
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                // 交换 arr[i] 和 arr[j]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                int temp = arr[i];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                arr[i] = arr[j];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                arr[j] = temp;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // 将基准元素放到正确的位置
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int temp = arr[i + 1];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        arr[i + 1] = arr[high];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        arr[high] = temp;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return i + 1; // 返回基准元素的索引
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public static void main(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int[] arr = {10, 7, 8, 9, 1, 5};
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int n = arr.length;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        quickSort(arr, 0, n - 1);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        System.out.println(&amp;#34;Sorted array: &amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for (int num : arr) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            System.out.print(num + &amp;#34; &amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;1-set&#34;&gt;1. Set
&lt;/h2&gt;&lt;p&gt;==HashSet==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据结构&lt;/strong&gt;：基于哈希表（Hash Table）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不保证元素的顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许存储 &lt;code&gt;null&lt;/code&gt; 元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本操作（添加、删除、包含）的平均时间复杂度为 O(1)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==LinkedHashSet==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据结构&lt;/strong&gt;：基于==哈希表和双向链表==。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持插入顺序（按元素添加的顺序）。&lt;/li&gt;
&lt;li&gt;允许存储 &lt;code&gt;null&lt;/code&gt; 元素。&lt;/li&gt;
&lt;li&gt;基本操作（添加、删除、包含）的时间复杂度为 O(1)，但由于维护链表，性能稍逊于 &lt;code&gt;HashSet&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==TreeSet==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构：==基于红黑树==（自平衡的二叉搜索树）&lt;/li&gt;
&lt;li&gt;保持元素的自然顺序（或使用提供的比较器进行排序）。&lt;/li&gt;
&lt;li&gt;不允许存储 &lt;code&gt;null&lt;/code&gt; 元素（因为无法与其他元素进行比较）。&lt;/li&gt;
&lt;li&gt;基本操作（添加、删除、包含）的时间复杂度为 O(log n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-list&#34;&gt;2. List
&lt;/h2&gt;&lt;h1 id=&#34;54-类加载&#34;&gt;54. 类加载
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;：通过双亲委派模型，核心类库（如 &lt;code&gt;java.lang.String&lt;/code&gt;）不会被自定义类加载器篡改。即使应用程序中定义了一个类名为 &lt;code&gt;java.lang.String&lt;/code&gt; 的类，类加载器也不会加载它，而是优先加载核心类库的 &lt;code&gt;String&lt;/code&gt; 类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免重复加载&lt;/strong&gt;：同一个类在 JVM 中只会被加载一次，双亲委派模型可以==防止类的重复加载==。&lt;/p&gt;
&lt;h2 id=&#34;0-层级&#34;&gt;0. 层级
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Bootstrap ClassLoader&lt;/strong&gt;（==启动类加载器==）：==负责加载 Java 核心类库==，如 &lt;code&gt;rt.jar&lt;/code&gt;。这是 ==JVM 自带的类加载器==，用 C/C++ 编写，==无法直接获取引用==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extension ClassLoader&lt;/strong&gt;（==扩展类加载器==）：负责加载扩展类库 &lt;code&gt;ext&lt;/code&gt; 目录下的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application ClassLoader&lt;/strong&gt;（==应用类加载器==）：负责加载应用程序的类路径下的类，通常是我们开发者编写的 Java 类。&lt;/p&gt;
&lt;p&gt;其他类加载器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web ClassLoader / Servlet ClassLoader&lt;/strong&gt;：  Web 应用中，应用服务器（如 Tomcat）会==使用特定的类加载器来加载 Web 应用的类。每个 Web 应用都有自己的类加载器==，用于加载 &lt;code&gt;WEB-INF/lib&lt;/code&gt; 和 &lt;code&gt;WEB-INF/classes&lt;/code&gt; 下的类 , ==隔离不同应用之间的类加载，避免类冲突==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thread Context ClassLoader&lt;/strong&gt;（线程上下文类加载器）==可以破坏双亲委派==：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：==允许线程使用自定义类加载器==，通常用于实现与应用服务器、框架集成的场景。可以通过 &lt;code&gt;Thread.currentThread().getContextClassLoader()&lt;/code&gt; 设置和获取当前线程的上下文类加载器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：==常用于 Java EE 服务器中的线程池或多线程应用==，以便不同线程使用不同的类加载器加载类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==可以通过继承ClassLoder 这个类来自定义类加载器, 重写方法可以实现打破双亲委派==,  打破双亲委派就是 类加载器可以加载不属于当前作用范围的类&lt;/p&gt;
&lt;h2 id=&#34;1-双亲委派&#34;&gt;1. 双亲委派
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;双亲委派模型&lt;/strong&gt;（Parent Delegation Model）是 ==Java 类加载机制中的一种设计模式==&lt;/p&gt;
&lt;p&gt;其核心思想是：==一个类加载器在加载一个类时，首先将这个任务委派给它的父类加载器，如果父类加载器无法完成这个加载任务，再由当前加载器来尝试加载。==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检查缓存&lt;/strong&gt;：JVM 首先会检查类是否已经被加载（通常通过缓存）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;委派父类加载器&lt;/strong&gt;：==如果缓存中没有找到该类，当前类加载器不会立即尝试自己加载，而是先委托父类加载器去加载==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逐级向上委派&lt;/strong&gt;：==每个类加载器都会向它的父类加载器委派==，直到最顶层的根类加载器（Bootstrap ClassLoader）。如果父类加载器能够成功加载类，就返回这个类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当前类加载器加载&lt;/strong&gt;：如果父类加载器无法加载这个类（即类不在父类加载器的加载范围内），则由当前类加载器尝试加载该类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错&lt;/strong&gt;：如果当前类加载器也无法加载，==抛出 &lt;code&gt;ClassNotFoundException&lt;/code&gt; 异常==。&lt;/p&gt;
&lt;h2 id=&#34;2-tomcat-是怎么打破双亲委派的&#34;&gt;2. Tomcat 是怎么打破双亲委派的
&lt;/h2&gt;&lt;p&gt;==Tomcat 通过自定义的类加载器打破了传统的双亲委派模型==，以解决 Web 应用的==类隔离、类冲突、热部署等问题==。这种设计使得 Web 应用的类加载更加灵活，同时能够满足多个 Web 应用同时运行且互不干扰的需求。&lt;/p&gt;
&lt;p&gt;Tomcat 的类加载器体系如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Bootstrap ClassLoader&lt;/strong&gt;：加载 JRE 核心类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System ClassLoader&lt;/strong&gt;：==加载 &lt;code&gt;lib/&lt;/code&gt; 目录下的核心库（如 Servlet API）==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebApp ClassLoader&lt;/strong&gt;：==每个 Web 应用都有自己独立的类加载器==，负责加载应用的 &lt;code&gt;WEB-INF/classes&lt;/code&gt; 和 &lt;code&gt;WEB-INF/lib&lt;/code&gt; 下的类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tomcat 打破双亲委派的原因&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类隔离&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Web 服务器中，每个应用都需要各自独立的类加载空间，防止不同应用之间的类发生冲突。例如，两个不同的 Web 应用可能依赖不同版本的相同库，Tomcat 通过自定义类加载器，确保每个 Web 应用有自己独立的类加载空间，避免应用 A 加载到应用 B 的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;热部署和类重新加载&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 应用通常需要支持热部署，即在运行时重新加载类或更新应用。==这意味着某些类在运行过程中需要被卸载并重新加载。Tomcat 通过自定义类加载器，使得某些类可以被动态地重新加载，而不必依赖 JVM 的默认加载机制==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Servlet API 与 Web 应用类的冲突避免&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Tomcat 的类加载机制需要区分两种类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务器级别的类&lt;/strong&gt;：如 Servlet API 等，由 Tomcat 的类加载器（通常是父类加载器）加载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用级别的类&lt;/strong&gt;：包括 Web 应用的类和第三方依赖库。这些类应由 Web 应用自己的类加载器加载，不能与服务器类产生冲突。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;具体实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在 Tomcat 中，==**WebAppClassLoader** 是自定义的类加载器，它会首先尝试加载 Web 应用自身的类，而不是直接委托父类加载器（如 Application ClassLoader 或 Extension ClassLoader）==。这种方式允许 Web 应用自定义实现某些核心类库，甚至覆盖父类加载器加载的某些类。 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;55--spring-bootspring-mvc-和-spring&#34;&gt;55.  Spring Boot、Spring MVC 和 Spring
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Spring Framework（Spring）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;是一个开源的Java平台，用于==简化企业级应用程序的开发==。它提供了一系列的功能，比如依赖注入（DI）、面向切面编程（AOP）、数据访问、消息传递、测试支持等。&lt;/li&gt;
&lt;li&gt;Spring框架的==核心是控制反转（IoC）容器，它负责管理对象的创建、生命周期、配置和其他对象之间的依赖关系==。&lt;/li&gt;
&lt;li&gt;它是一个全面的企业级服务框架，==提供了广泛的功能，但不包括Web框架的功能==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring MVC&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;是Spring框架的一个模块，==专门用于构建Web应用程序==。&lt;/li&gt;
&lt;li&gt;它实现了MVC（Model-View-Controller）设计模式，帮助开发者将应用程序分为模型（Model）、视图（View）和控制器（Controller）三个部分，以实现关注点分离。&lt;/li&gt;
&lt;li&gt;Spring MVC==提供了一个灵活的、易于使用的Web框架，支持RESTful Web服务==，并集成了Spring的其他模块，如数据访问、安全性等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;是基于Spring框架的一个项目，旨在==简化Spring应用程序的创建和部署==。&lt;/li&gt;
&lt;li&gt;它通过提供一系列的“Starters”（启动器），自动配置Spring和第三方库，使得开发者可以快速启动和运行Spring应用程序。&lt;/li&gt;
&lt;li&gt;==Spring Boot消除了传统Spring应用程序中繁琐的配置工作，支持自动配置、嵌入式服务器（如Tomcat、Jetty等）、独立运行等特性==。&lt;/li&gt;
&lt;li&gt;它非常适合微服务架构，因为它可以快速启动和部署，并且易于与其他微服务集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;56-cpu-使用率高&#34;&gt;56. CPU 使用率高
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;有没有频繁的上下问切换, 上下文切换做了两件事, 需要执行CPU内核相关指令, 实现状态的保存和恢复, ==例如文件IO, 网络IO, 锁等待==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存,运行中的线程中的执行状态&lt;/li&gt;
&lt;li&gt;恢复,让处于等待的线程执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序中创建了大量的线程, 或者有线程一直占用CPU 资源 , 比如说死循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;top 命令查看 java 进程占用CPU 的情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jstack 导出进程栈, ==看是否有不恰当的锁使用,有没有频繁的锁资源的争抢, 有频繁的IO 操作, 密集的CPU运算, 或者是频繁的触发full GC,大量日志写入==&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;57-mybatis-中的--和--的区别&#34;&gt;57. mybatis 中的 #{} 和 ${} 的区别
&lt;/h1&gt;&lt;p&gt;都是用来传递参数的, # 号不会造成sql 注入, $ 符号 将传递的参数值直接替换到SQL语句中，不会进行预处理, 不适用于预处理的场景使用 如, ==动态表名, 列名==&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 使用预处理参数 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;selectUsers&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;resultType=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;User&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  SELECT * FROM users WHERE id = #{id}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 使用字符串替换参数 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;selectUsersByTableName&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;resultType=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;User&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  SELECT * FROM ${tableName} WHERE id = #{id}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;58-mybatis-如何进行分页&#34;&gt;58. mybatis 如何进行分页
&lt;/h1&gt;&lt;p&gt;三种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;物理分页: select 语句里面加上 页码和每页条数的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑分页: mybatis 提供了 RowBounds 对象, 实现了内存级别的分页,  不依赖于数据库层的分页功能，而是通过 MyBatis 在内存中对结果集进行截取，从而实现分页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于mybatis interceptor 拦截器, 对select 语句进行动态的分页关键字的拼接&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;59-mysql索引结构为什么使用b树&#34;&gt;59. Mysql索引结构为什么使用B+树
&lt;/h1&gt;&lt;p&gt;从三个方面看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解二叉树, AVL树, B树的概念&lt;/li&gt;
&lt;li&gt;B树和B+树的应用场景&lt;/li&gt;
&lt;li&gt;为什么使用B树或者B+树来做索引结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241204145559187.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241204145559187&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;左右两个子树的高度值不能超过1, 所以引入了左旋和右旋的机制&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241204145622224.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241204145622224&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;B树-多路平衡查找树, ==可以有多个子树, 子树的数量取决于关键字的数量==, 可以拥有的子树的数量等于关键字的数量加上1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241204145738154.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241204145738154&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;B树存储结构&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241204150712662.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241204150712662&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;B+树存储结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;树节点只存储关键字, 所有数据存储在叶子节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并且叶子节点的所有数据使用的是双向链表来关联 Innodb&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241204150847577.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241204150847577&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241204151207028.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241204151207028&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;==树的高度决定了磁盘IO的次数, 磁盘IO次数越少, 对于性能的提升就越大==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储数据量维度&lt;/strong&gt;：==B树的数据存储在每个节点上, B + 树内节点仅&lt;strong&gt;存索引关键字与指针&lt;/strong&gt;，&lt;strong&gt;叶节点存完整数据记录或指向记录的指针&lt;/strong&gt;==，相同磁盘页空间可容纳更多索引项，&lt;strong&gt;树的阶数更高，索引层次减少&lt;/strong&gt;，在海量数据存储场景下能高效管理并快速定位数据，像大型电商商品数据表，可轻松应对海量商品信息索引构建与查询需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范围查询效能&lt;/strong&gt;：**B + 树叶节点以链表形式有序连接，范围查询时，从起始点顺链表依次读取即可，无需回溯上层节点，**磁盘 I/O 次数稳定可预测，相比之下，B 树范围查询可能多次回溯上层节点，I/O 操作繁杂，B + 树大幅提升范围查询效率，适用于查询日期区间内订单记录等场景，保障数据有序读取与快速检索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据检索速度&lt;/strong&gt;：&lt;strong&gt;B + 树数据存于叶节点，查询路径固定从根至叶，检索时依索引键快速定位叶节点获取数据，缓存命中率因路径稳定而提升，数据读取高效&lt;/strong&gt;。B 树内节点存数据，检索可能中途获取数据，访问路径多变，&lt;strong&gt;缓存利用欠佳&lt;/strong&gt;，B + 树在频繁数据检索场景，如高频用户信息查询系统中，优势尽显，加快数据读取响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局扫描表现&lt;/strong&gt;：&lt;strong&gt;B + 树叶节点链表有序，全表扫描顺链表遍历即可，高效且有序&lt;/strong&gt;。B 树无此链表结构，&lt;strong&gt;扫描需按层次遍历&lt;/strong&gt;，节点访问无序易致磁盘频繁寻道，I/O 负担重。在执行统计全库数据量、计算平均值等操作时，B + 树可快速完成，降低系统资源消耗，提升整体运算效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免叶子节点分裂优势&lt;/strong&gt;：数据插入更新时，B + 树叶节点以页为单位管理，满时分裂以页为单位分配调整，保持叶节点数据紧凑有序。&lt;strong&gt;B 树节点分裂按关键字平衡原则，易引发连锁反应，致树结构频繁调整与磁盘 I/O 波动&lt;/strong&gt;，B + 树分裂策略简单高效，维护索引结构稳定，减少索引维护成本，保障数据库持续稳定运行与高效性能发挥，在高并发数据更新场景中优势显著。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少磁盘IO,  同层高存储更多索引数据&lt;/li&gt;
&lt;li&gt;范围查询比较高效&lt;/li&gt;
&lt;li&gt;全表扫描, 叶子节点存储所有的数据, 只需要扫描叶子节点&lt;/li&gt;
&lt;li&gt;自增方面看, 用自增的整型数字作为主键的话, B树会造成叶子节点分裂&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;60-mysql-事务实现原理&#34;&gt;60. Mysql 事务实现原理
&lt;/h1&gt;&lt;p&gt;MySQL 中的事务遵循 ACID 属性，这保证了事务的可靠性和一致性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原子性（Atomicity）&lt;/strong&gt;：事务中的所有操作要么全部完成，要么全部不执行。使用&lt;strong&gt;日志管理机制&lt;/strong&gt;（如二进制日志和事务日志）来确保原子性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt;：事务必须使数据库从一个一致性状态转换到另一个一致性状态。==数据的完整性没有被破坏==。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性（Isolation）&lt;/strong&gt;：&lt;strong&gt;多个事务并发执行&lt;/strong&gt;时，彼此之间的操作不会相互干扰。&lt;strong&gt;MySQL 支持多种隔离级别&lt;/strong&gt;来控制事务之间的可见性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性（Durability）&lt;/strong&gt;：一旦事务提交，其结果是永久性的，即使系统崩溃也能保留事务的结果。使用持久化机制（如将数据写入磁盘）来确保持久性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==存储引擎==&lt;/p&gt;
&lt;p&gt;MySQL 支持多种存储引擎（如 InnoDB、MyISAM 等），不同存储引擎的事务实现机制不同。InnoDB 引擎是支持事务的主要引擎，采用以下机制实现事务：&lt;/p&gt;
&lt;p&gt;==锁机制==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行级锁&lt;/strong&gt;：InnoDB 通过使用&lt;strong&gt;行级锁来允许多用户并发访问同一数据，降低了锁竞争&lt;/strong&gt;，提高了并发性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;间隙锁&lt;/strong&gt;：用于&lt;strong&gt;防止幻读问题，锁定某些范围内的记录&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;意向锁&lt;/strong&gt;：帮助管理行级锁的过程，避免死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==日志机制==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重做日志（Redo Log）&lt;/strong&gt;：用于保证事务持久性。在事务提交时，InnoDB 会将变更写入&lt;code&gt;Redo Log&lt;/code&gt;，以便在系统崩溃后恢复数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;回滚日志（Undo Log）&lt;/strong&gt;：实现&lt;strong&gt;事务的原子性和隔离性&lt;/strong&gt;。它记录了&lt;strong&gt;事务修改数据的历史&lt;/strong&gt;，可以使用这些日志进行数据的回滚。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==多版本并发控制（MVCC）==&lt;/p&gt;
&lt;p&gt;MVCC 是一种常用的并发控制机制 ==MVCC 允许多个事务同时读取和修改数据而不会互相干扰==，从而提高数据库系统的并发性能和响应速度 ，&lt;strong&gt;避免了读锁和写锁的竞争&lt;/strong&gt;。每次修改记录时，&lt;strong&gt;创建一个新的版本&lt;/strong&gt;，&lt;strong&gt;读取操作可以读取旧版本，而不必等待写操作完成。InnoDB 通过时间戳来标识事务，支持实现高效的并发访问。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在执行过程中，事务可能处于以下状态之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;活跃（Active）&lt;/strong&gt;：事务正在执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部分提交（Partially Committed）&lt;/strong&gt;：事务可能已经执行了一部分，但还未完全提交。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;失败（Failed）&lt;/strong&gt;：事务因错误而失败，需要回滚。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已提交（Committed）&lt;/strong&gt;：事务已成功提交，数据已持久化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已回滚（Rolled Back）&lt;/strong&gt;：事务已失败，所有更改被撤消。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL 通过结合 ACID 属性、存储引擎的功能、锁机制、日志机制和 MVCC 等技术来实现事务管理。通过这些机制，MySQL 能够确保在多用户并发环境中数据的完整性和一致性，同时提供高效的性能。&lt;/p&gt;
&lt;h1 id=&#34;61-mysql-事务隔离级别&#34;&gt;61. Mysql 事务隔离级别
&lt;/h1&gt;&lt;p&gt;定义了多个事务之间的可见性，主要用于控制事务之间的数据访问和并发性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;READ UNCOMMITTED（未提交读）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在此级别下，一个事务可以读取另一个未提交事务的数据。&lt;/li&gt;
&lt;li&gt;存在 “脏读” 的风险，即读取到的数据可能在后续被回滚。&lt;/li&gt;
&lt;li&gt;适合对数据一致性要求不高的场景，但通常不推荐使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;READ COMMITTED（已提交读）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;事务只能读取已提交事务的数据。&lt;/li&gt;
&lt;li&gt;避免了脏读的发生，&lt;strong&gt;但仍然可能出现 “不可重复读” 问题，即在同一事务中多次读取同一数据时，结果可能不同。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般在许多应用中被广泛使用，因为它在平衡一致性和并发性方面提供了较好的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REPEATABLE READ（可重复读）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在该级别下，&lt;strong&gt;同一事务内多次读取同一数据所得到的结果是一致的，即不会发生不可重复读&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;此级别是 MySQL 的默认隔离级别。&lt;/li&gt;
&lt;li&gt;可能仍然会发生 “幻读” 现象，即在同一事务中，查询的结果集在&lt;strong&gt;两次查询之间可能会增加或减少新行&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SERIALIZABLE（可串行化）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;这是最高的事务隔离级别，所有的事务按顺序执行，完全避免了幻读、不可重复读和脏读。&lt;/li&gt;
&lt;li&gt;由于强大的数据一致性保障，这一级别会显著降低并发性能，可能导致较高的锁争用和事务阻塞。&lt;/li&gt;
&lt;li&gt;适用于对数据一致性要求极高的场景，但通常会影响系统的吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;READ UNCOMMITTED&lt;/strong&gt;: 最低隔离级别，允许脏读。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;READ COMMITTED&lt;/strong&gt;: 避免脏读，可能出现不可重复读。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REPEATABLE READ&lt;/strong&gt;: 避免不可重复读，可能出现幻读（MySQL 默认）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SERIALIZABLE&lt;/strong&gt;: 最高隔离级别，避免所有读数据冲突，但性能最差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;62-mvcc&#34;&gt;62. MVCC
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt; MVCC 通过为**每个数据行创建多个版本来实现并发控制**。每个事务在**读取数据时可以看到事务开始时的数据状态，而不是当前的数据状态**。这种方式可以避免读操作与写操作之间的相互阻塞。 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;每次修改都会创建新的版本&lt;/strong&gt;：每次执行 &lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt; 或 &lt;code&gt;DELETE&lt;/code&gt; 操作时，InnoDB 会创建一个新的版本，并通过事务 ID 来管理版本的可见性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据行有多个版本&lt;/strong&gt;：每个版本包含自己的事务 ID（创建时间戳），以及在删除的情况下，记录删除的事务 ID（删除时间戳）。这些时间戳用于判断事务是否能看到该版本的记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVCC 通过时间戳控制可见性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;==在数据库中维护多个版本的数据行，确保高并发环境下的事务隔离性，同时提高并发性能==&lt;/p&gt;
&lt;p&gt;==版本管理==&lt;/p&gt;
&lt;p&gt;在 MVCC 中，&lt;strong&gt;每条记录都包含与其版本相关的两个时间戳&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建时间戳&lt;/strong&gt;：表示事务创建时的时间戳，用于标识记录何时被创建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除时间戳&lt;/strong&gt;：表示事务删除记录时的时间戳，用于标识记录何时被逻辑删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==垃圾回收==&lt;/p&gt;
&lt;p&gt;随着事务的执行和数据版本的增加，旧版本的数据会占用越来越多的存储空间。因此，MVCC 需要定期进行垃圾回收，以清理那些不再被任何活动事务引用的旧版本。&lt;/p&gt;
&lt;h2 id=&#34;1-读取数据的机制&#34;&gt;1. 读取数据的机制
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;读取快照&lt;/strong&gt;：当事务开始时，MVCC 会为其创建一个数据快照，保存数据行的版本信息。&lt;strong&gt;事务在执行查询时，总是读取快照中的数据版本，而非正在更新的版本&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可见性判断&lt;/strong&gt;：在执行读取操作时，&lt;strong&gt;MVCC 会根据事务的时间戳判断哪个版本的记录是可见的&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;==只有创建时间戳小于或等于当前事务时间戳，且删除时间戳大于当前事务的记录，才会对当前事务可见==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-写入数据的机制&#34;&gt;2. 写入数据的机制
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当事务修改数据时，它&lt;strong&gt;不会立即覆盖原有数据，而是创建一个新的版本&lt;/strong&gt;。旧版本的数据仍然保留，直到没有事务再访问它。从而&lt;strong&gt;实现数据的修改而不影响正在读取这些数据的其他事务&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;63-行锁-临键锁-间隙锁&#34;&gt;63. 行锁, 临键锁, 间隙锁
&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;锁类型&lt;/th&gt;
          &lt;th&gt;锁定范围&lt;/th&gt;
          &lt;th&gt;用途&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;行锁&lt;/td&gt;
          &lt;td&gt;单行记录&lt;/td&gt;
          &lt;td&gt;防止特定行被修改或者写入冲突&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;临键锁&lt;/td&gt;
          &lt;td&gt;行记录+相邻间隙&lt;/td&gt;
          &lt;td&gt;防止幻读和插入&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;间隙锁&lt;/td&gt;
          &lt;td&gt;数据间的区间(不含具体行)&lt;/td&gt;
          &lt;td&gt;仅防止插入&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-行锁-记录锁&#34;&gt;1. 行锁 (记录锁)
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;UPDATE&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;或&lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt;的操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;行锁是一种粒度较小的锁，仅锁定数据库中的某一行记录，从而允许多个事务同时访问表中的不同记录。这种锁粒度小，可以实现高并发的事务处理。
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并发性高&lt;/strong&gt;：相比于表锁，行锁允许更多的事务并发执行，适合高并发访问的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;锁定具体行&lt;/strong&gt;：只有被修改的数据行会被锁定，其它行仍然可以被访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重复读&lt;/strong&gt;：通过行锁机制，可以防止&lt;strong&gt;不可重复读和幻读&lt;/strong&gt;现象的发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-临键锁&#34;&gt;2. 临键锁
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;它结合了行锁和间隙锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;临键锁是 InnoDB 的一种组合锁，它==&lt;strong&gt;既锁定了符合条件的记录（行锁），也锁定了该记录的前一个位置&lt;/strong&gt;==。这种锁机制通常用于避免幻读的发生。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;范围锁定&lt;/strong&gt;：在添加或修改记录时，临键锁会锁定一个范围，包括目标行以及该行的上一个间隙，从而&lt;strong&gt;避免其他事务在这个范围内插入新记录&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用于范围查询&lt;/strong&gt;：当进行范围查询时，可以防止其他事务插入新的符合查询条件的行，从而避免幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==用于&lt;code&gt;REPEATABLE READ&lt;/code&gt;隔离级别下的范围查询（如&lt;code&gt;SELECT ... WHERE&lt;/code&gt;==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;： 当查询范围为&lt;code&gt;id BETWEEN 10 AND 20&lt;/code&gt;时，数据库会锁住符合条件的行以及这些行之间的间隙，防止其他事务插入新行（比如&lt;code&gt;id=15&lt;/code&gt;）&lt;/p&gt;
&lt;h2 id=&#34;3-间隙锁&#34;&gt;3. 间隙锁
&lt;/h2&gt;&lt;p&gt;间隙锁是一种&lt;strong&gt;锁定在某一记录之间的空间&lt;/strong&gt;，而不是锁定具体记录。&lt;strong&gt;它用于锁定 “间隙”，防止其他事务在此间隙中插入新记录，从而避免幻读现象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;==特点==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;锁定间隙&lt;/strong&gt;：在不同记录之间的空隙处添加锁，阻止其他事务在这个空间内插入新数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用于防止幻读&lt;/strong&gt;：当应用了范围查询时，可以有效防止插入幻读的发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不能直接访问&lt;/strong&gt;：间隙锁不会锁定具体的行，而是锁定行之间的空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;64-mysql索引失效的情况&#34;&gt;64. Mysql索引失效的情况
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用了不支持索引的表达式&lt;/strong&gt;（如计算字段）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不适当的 &lt;code&gt;LIKE&lt;/code&gt; 操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;OR&lt;/code&gt; 条件的使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据类型不匹配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用了 &lt;code&gt;NULL&lt;/code&gt; 值&lt;/strong&gt;进行比较&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数或操作导致索引失效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏合适的索引覆盖&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在索引列上做运算, 比如说加函数&lt;/strong&gt;, Mysql 在生成执行计划的时候会根据统计信息判断, 是否要去使用索引的, 加了函数运算, 导致mysql 无法识别索引列, 不过从8.0开始Mysql 加了函数索引来解决这个问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在一个多列构成的组合索引里面, 需要按照&lt;strong&gt;最左匹配原则&lt;/strong&gt;,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最左匹配原则的定义
&lt;ul&gt;
&lt;li&gt;最左匹配原则是 MySQL 在使用联合索引（即由多个列组成的索引）时遵循的一个重要原则。==它指的是在查询条件中使用联合索引时，索引的匹配是从最左边的列开始的，并且要按照索引列的顺序依次进行匹配==。只有当查询条件中使用了联合索引最左边的列，索引才会被部分使用；如果从最左边开始连续的列都在查询条件中使用，那么索引可以被更充分地利用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;联合索引的存储结构基础
&lt;ul&gt;
&lt;li&gt;联合索引在 MySQL 的存储引擎（如 InnoDB）中是&lt;strong&gt;按照索引列的顺序构建 B + 树的&lt;/strong&gt;。&lt;strong&gt;以一个包含列 A、B、C 的联合索引为例，在 B + 树的叶子节点中，数据是按照 A、B、C 列的值进行排序存储的&lt;/strong&gt;。最左列 A 的值首先被用来构建索引树的第一层排序，对于 A 列值相同的记录，再根据 B 列的值进行排序，以此类推。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引列存在隐式转换&lt;/strong&gt;, 索引列是字符串类型, 但是sql 查询的时候没有使用引号, mysql 就会去做自动类型转换, 导致索引失效, 常见的隐式转换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数值与字符串&lt;/li&gt;
&lt;li&gt;字符串和日期&lt;/li&gt;
&lt;li&gt;数字和布尔值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;索引列使用不等于号, 或者 not&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;like 操作 使用左通配符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or  当 &lt;code&gt;OR&lt;/code&gt; 的左右两边的条件没有共同的索引时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-聚簇索引clustered-index&#34;&gt;&lt;strong&gt;1. 聚簇索引（Clustered Index）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;聚簇索引是将表的数据行与索引行按照相同的顺序存储在一起的一种索引方式。一个表只能有一个聚簇索引，因为表的数据行只能按照一种顺序存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;索引和数据存储在一起&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;聚簇索引的叶子节点存储的是数据本身。&lt;/li&gt;
&lt;li&gt;索引值与数据行的物理存储顺序一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主键默认作为聚簇索引&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果表定义了主键，MySQL（InnoDB 存储引擎）会默认将主键作为聚簇索引。&lt;/li&gt;
&lt;li&gt;如果没有主键，MySQL 会选择一个唯一非空索引作为聚簇索引。&lt;/li&gt;
&lt;li&gt;如果既没有主键也没有唯一非空索引，MySQL 会生成一个隐藏的聚簇索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询效率高&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;查询基于主键的范围时性能更高，因为数据已经按照主键的顺序存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询主键或主键范围时速度很快。&lt;/li&gt;
&lt;li&gt;数据存储与索引顺序一致，减少了磁盘 I/O。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入速度可能较慢，尤其是主键非连续的情况下（需要重新排列存储位置）。&lt;/li&gt;
&lt;li&gt;需要更新数据时，可能涉及更多的磁盘操作。&lt;/li&gt;
&lt;li&gt;聚簇索引可能导致数据存储碎片。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-非聚簇索引non-clustered-index&#34;&gt;&lt;strong&gt;2. 非聚簇索引（Non-Clustered Index）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;非聚簇索引是指索引结构与数据存储是分离的，索引的叶子节点存储的是数据行的指针（如主键或行号），而不是实际数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;索引与数据分离&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;非聚簇索引的叶子节点包含指向数据行的引用（如主键值或 ROWID）。&lt;/li&gt;
&lt;li&gt;索引结构与表数据分开存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以有多个非聚簇索引&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一个表可以有多个非聚簇索引，每个非聚簇索引对应一个独立的索引结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询需要回表&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用非聚簇索引查询时，可能需要通过索引找到对应的主键或行号，然后再回到聚簇索引中查找实际数据，这一过程称为&lt;strong&gt;回表&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以为不同的列创建多个非聚簇索引，灵活支持多种查询。&lt;/li&gt;
&lt;li&gt;不受数据行存储顺序的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询非主键列时，可能需要回表操作，导致性能开销增加。&lt;/li&gt;
&lt;li&gt;索引维护开销较高（如插入、删除、更新时需要更新索引结构）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-总结-1&#34;&gt;3. 总结
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;InnoDB 默认使用聚簇索引&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB 存储引擎默认将主键作为聚簇索引。&lt;/li&gt;
&lt;li&gt;MyISAM 存储引擎不支持聚簇索引，所有索引都是非聚簇索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;回表操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果查询字段不在非聚簇索引中，需要通过索引的指针回到聚簇索引中查找数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;覆盖索引&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果非聚簇索引包含了查询需要的所有列，则可以避免回表操作，提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;索引选择&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键列适合作为聚簇索引。&lt;/li&gt;
&lt;li&gt;对频繁查询但不作为主键的列，可以建立非聚簇索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;聚簇索引&lt;/strong&gt;：数据和索引存储在一起，主键查询效率高，适用于频繁的范围查询和排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非聚簇索引&lt;/strong&gt;：数据和索引分离，支持多列查询，但可能需要回表操作。&lt;/p&gt;
&lt;h1 id=&#34;65-myisam-和-innodb-引擎的区别&#34;&gt;65. MyISAM 和 InnoDB 引擎的区别
&lt;/h1&gt;&lt;p&gt;存储引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义数据的存储方式&lt;/li&gt;
&lt;li&gt;数据读取的实现逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MyISAM 两个文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.MYD 存数据&lt;/li&gt;
&lt;li&gt;.MYI  存索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Innodb 只有一个文件 ibd, 包含了索引和数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据存储不同&lt;/li&gt;
&lt;li&gt;事务的支持&lt;/li&gt;
&lt;li&gt;锁的支持&lt;/li&gt;
&lt;li&gt;Innodb 支持外键&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;66-md5-值应该用char-还是varchar&#34;&gt;66. MD5 值应该用char 还是varchar
&lt;/h1&gt;&lt;p&gt;因为MD5 长度是固定的, 32或者16位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;占用空间不同, char 是固定的, varchar 是可变的&lt;/li&gt;
&lt;li&gt;存储效率不同, varchar 每次更新都需要更新存储空间的长度, 效率较低&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;67-update-语句用什么锁&#34;&gt;67. update 语句用什么锁
&lt;/h1&gt;&lt;p&gt;取决于执行的条件where , 事务隔离级别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行锁情况&lt;/strong&gt;：在 InnoDB 存储引擎下，默认事务隔离级别为可重复读（Repeatable Read）时，&lt;code&gt;UPDATE&lt;/code&gt;语句通常施加行级锁。当更新操作涉及特定行数据时，仅锁住该行，不同事务可并发更新其他行，减少锁冲突、提升并发性能。
&lt;ul&gt;
&lt;li&gt;例如，在员工信息表中，
&lt;ul&gt;
&lt;li&gt;事务 T1 更新员工 A 的薪资，&lt;/li&gt;
&lt;li&gt;事务 T2 更新员工 B 的薪资，&lt;/li&gt;
&lt;li&gt;两者可并行，互不干扰。&lt;/li&gt;
&lt;li&gt;此机制利用记录中的隐藏字段及索引实现精准锁定，确保数据一致性与事务隔离性，在高并发的 OLTP（联机事务处理）场景中优势显著，如电商订单处理、金融交易系统等频繁修改少量行数据的应用场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表锁情况&lt;/strong&gt;：&lt;strong&gt;若未使用索引或索引失效，InnoDB 可能退化为表锁&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;如在数据量小且频繁全表更新的表中，使用&lt;code&gt;UPDATE&lt;/code&gt;语句&lt;strong&gt;更新大量行数据&lt;/strong&gt;（超表行数一定比例），InnoDB 为保证事务一致性与操作简便性，&lt;strong&gt;可能对整个表加锁&lt;/strong&gt;，虽牺牲并发性能，但避免复杂锁管理开销。&lt;/li&gt;
&lt;li&gt;MyISAM 存储引擎执行&lt;code&gt;UPDATE&lt;/code&gt;语句一般用表锁，因其设计侧重简单高效，适用于读多写少、对并发要求不高的场景，如数据仓库中的历史数据报表生成场景，频繁全表更新时表锁可快速完成操作，减少资源竞争与事务协调成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;join不要超过三张表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性能问题&lt;/li&gt;
&lt;li&gt;维护性, 可读性&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;68-mysql-性能优化&#34;&gt;68. Mysql 性能优化
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询优化&lt;/strong&gt;：合理使用索引，避免全表扫描，Explain 优化 SQL 语句, 慢查询优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库配置优化&lt;/strong&gt;：调整 MySQL 配置参数（如缓存、连接池、日志等）以提升性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;InnoDB Buffer Pool&lt;/strong&gt;：&lt;code&gt;innodb_buffer_pool_size&lt;/code&gt; 是最关键的参数之一，它决定了 InnoDB 缓存的数据页的大小。如果它设置得过小，会导致磁盘 I/O 增加。   ==专用数据库服务器总内存的 70%-80%==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;硬件优化&lt;/strong&gt;：使用 SSD、调整 RAID 配置等提升硬件性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;架构优化&lt;/strong&gt;：使用数据库分区、读写分离、分库分表等方法提高数据库扩展性和并发能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;69-spring-boot-约定大于配置&#34;&gt;69. Spring boot 约定大于配置
&lt;/h1&gt;&lt;p&gt;繁琐的配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;管理jar包依赖&lt;/li&gt;
&lt;li&gt;web.xml 文件维护&lt;/li&gt;
&lt;li&gt;Dispatch-Servlet.xml 文件维护&lt;/li&gt;
&lt;li&gt;应用部署到web容器&lt;/li&gt;
&lt;li&gt;第三方组件, Mybatis 集成 需要维护配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;约定大于配置的体现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;spring boot  会自动为你处理常用依赖的版本, 例如引入  &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 会依赖 &lt;code&gt;spring-web&lt;/code&gt; 和 &lt;code&gt;spring-webmvc&lt;/code&gt;，并且这些库的版本会自动和 Spring Boot 的版本兼容。&lt;/li&gt;
&lt;li&gt;Spring boot 自动装配机制, 通过扫描约定路径下的spring.factories 文件, 用来识别配置类, 从而实现Bean的自动装载&lt;/li&gt;
&lt;li&gt;配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个 Starter 都是一个&lt;strong&gt;预定义的依赖集合&lt;/strong&gt;，&lt;strong&gt;包含了默认的库和配置&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;：包含了开发 Web 应用所需的常用库和配置，比如 &lt;code&gt;spring-webmvc&lt;/code&gt;、&lt;code&gt;Tomcat&lt;/code&gt;、&lt;code&gt;Jackson&lt;/code&gt; 等，开发者只需添加这个 Starter 就能自动获得这些功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;：为 JPA 项目提供默认的配置，自动配置数据源、实体管理器工厂、事务管理等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;70-spring-boot-是如何实现自动配置的&#34;&gt;70. Spring boot 是如何实现自动配置的
&lt;/h1&gt;&lt;p&gt;自动装配: 自动把第三方的bean装载到 Spring IOC 容器里面, 不需要再去写Bean 相关的一些配置&lt;/p&gt;
&lt;p&gt;@SpringBootApplication 里面的 @EnableAutoConfiguration 注解 是实现自动装配的关键&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241206164125293.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241206164125293&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;自动装配的实现主要依靠&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入starter 启动依赖组件的时候, 这个组件里面必须包含一个 @Configuration 配置类, 配置类里面需要通过 @Bean 注解声明需要装载到 IOC 容器的对象&lt;/li&gt;
&lt;li&gt;这个配置类是在第三方的 jar 包里面, 这个类的全类路径放在 classpath/META-INFO/spring.factories 中, 这样 spring boot 就能知道 第三方jar 包的这个配置类的位置, 这个步骤是通过 SpringFactoriesLoader 来完成的&lt;/li&gt;
&lt;li&gt;Spring boot拿到所有的配置类之后, &lt;strong&gt;通过 @Conditional 注解条件判断之后 再 通过 ImportSelector&lt;/strong&gt; 这样一个接口 来实现对这些配置类的动态加载,  ImportSelector 是 Spring 框架中的一个接口,  &lt;strong&gt;AutoConfigurationImportSelector&lt;/strong&gt; 是springboot 的继承了该接口的实现类，用于在==配置类中实现动态导入其他配置类的功能==&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==@Enable 注解就是用来帮助我们对这个模块的bean 的自动注入的 思想相关的注解==&lt;/p&gt;
&lt;p&gt;ImportSelector  工作原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当在一个带有&lt;code&gt;@Configuration&lt;/code&gt;注解的类上使用&lt;code&gt;@Import&lt;/code&gt;注解并指定一个实现了&lt;code&gt;ImportSelector&lt;/code&gt;接口的类时，Spring 会在容器初始化阶段&lt;strong&gt;调用该接口的&lt;code&gt;selectImports&lt;/code&gt;方法&lt;/strong&gt;。这个方法返回一个包含要导入的&lt;strong&gt;配置类全限定名的字符串数组&lt;/strong&gt;。Spring 会根据这些返回的类名，将对应的配置类加载到容器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;71-starter-的作用&#34;&gt;71. starter 的作用
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241206173018549.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241206173018549&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;会把所有需要的jar 包给全部倒入进来, 并且jar 包版本自动管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;starter 可以自动装配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有自定义的配置都可以集成到 spring boot, 只需要通过维护 applicatio.yml 文件就可以了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241206173400761.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241206173400761&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;72-conditional-注解的作用&#34;&gt;72. @Conditional 注解的作用
&lt;/h1&gt;&lt;p&gt;条件化装配机制, &lt;strong&gt;允许在特定条件满足时加载或者跳过 Bean的定义与配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以接受一个或者多个实现了 Condition 接口的类, Condition 接口里面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FunctionalInterface&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Condition&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConditionContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnnotatedTypeMetadata&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：基于条件动态配置 Bean，增强应用的灵活性与可扩展性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：环境适配、属性控制、自动配置等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计理念&lt;/strong&gt;：关注点分离，避免硬编码，提升可维护性与可读性。&lt;/p&gt;
&lt;h1 id=&#34;73-spring-aop的原理&#34;&gt;73. Spring Aop的原理
&lt;/h1&gt;&lt;p&gt;动态代理是 运行时动态生成的, 基于Java 反射机制或者字节码操作, ==代理对象是在运行时在 JVM 内存中生成的, 在第一次使用的时候生成的==, 通过文件系统是看不到的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切面 Aspect, ==业务场景日志拦截,事务管理,权限校验==&lt;/li&gt;
&lt;li&gt;通知 Advice,  ==决定了拦截方法的前后或其他状态，具体增强代码写在哪里由==
&lt;ol&gt;
&lt;li&gt;前置通知&lt;/li&gt;
&lt;li&gt;后置通知&lt;/li&gt;
&lt;li&gt;环绕通知&lt;/li&gt;
&lt;li&gt;返回通知&lt;/li&gt;
&lt;li&gt;异常通知&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;连接点, Joinpoint, ==代码执行过程中可以被切入的点, (&lt;strong&gt;方法调用&lt;/strong&gt;),&lt;strong&gt;拦截的是方法的话就是被拦截的方法就是连接点&lt;/strong&gt;,包含的内容==
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;方法签名&lt;/strong&gt;：即方法的包路径、类名和方法名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法参数&lt;/strong&gt;：目标方法的参数值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标对象&lt;/strong&gt;：被代理的具体实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代理对象&lt;/strong&gt;：AOP 生成的代理对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;切点, PointCut, 定义在连接点上织入通知的表达式&lt;/li&gt;
&lt;li&gt;织入 Weaving , &lt;strong&gt;动态代理&lt;/strong&gt;完成&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Getting user...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Aspect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LoggingAspect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;execution(* com.example.service.*.*(..))&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JoinPoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;joinPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;拦截的方法签名：&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;joinPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSignature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 获取方法签名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;目标对象：&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;joinPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 获取目标对象&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;方法参数：&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;joinPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 获取参数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;是基于动态代理 ( JDK, CGLIB ) 实现的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类——不过这个选择过程对开发者完全透明、开发者也无需关心&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207134458649.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207134458649&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AspectJ 是专门为 Java 语言设计的 AOP 框架&lt;/strong&gt;，它基于 Java 语言进行扩展，提供了强大的面向切面编程（AOP）能力。然而，它的核心原理和运行机制使它能够在一定程度上支持其他与 Java 生态兼容的语言，如 Kotlin 和 Groovy，但这种支持是有限的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建代理对象&lt;/li&gt;
&lt;li&gt;拦截目标对象&lt;/li&gt;
&lt;li&gt;调用代理对象&lt;/li&gt;
&lt;li&gt;调用目标对象&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;代理对象: Spring 代理策略生成的对象&lt;/li&gt;
&lt;li&gt;目标对象: 业务代码&lt;/li&gt;
&lt;li&gt;织入代码: 就是代理方法的代码&lt;/li&gt;
&lt;li&gt;切面通知: 封装织入代码片段的回调方法&lt;/li&gt;
&lt;li&gt;MethodInvocation: 负责执行拦截器链, 在processd() 方法中执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-创建代理目标&#34;&gt;1. 创建代理目标
&lt;/h2&gt;&lt;p&gt;==按需加载==只有当被代理的 Bean 被注入到容器或首次使用时，Spring 才会为其创建代理对象&lt;/p&gt;
&lt;p&gt;在Spring 中创建Bean 实例都是从getBean() 方法开始的 , 在实例创建之后, Spring IOC 容器将会根据AOP 的配置, 去&lt;strong&gt;匹配目标类的类名, 看目标类的类名是否满足切面规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;调用ProxyFactory 创建代理bean , 并且缓存到IOC 容器中, 根据目标对象会选择不同的代理策略&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代理类实现了接口用jdk代理&lt;/li&gt;
&lt;li&gt;没有实现就用CGlib 代理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==也可以通过配置, 强制Spring 去使用 CGlib 代理==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;JDK 动态代理&lt;/strong&gt;：基于接口的代理，通过 Java 的 &lt;code&gt;Proxy.newProxyInstance&lt;/code&gt; 动态生成代理对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CGLIB 动态代理&lt;/strong&gt;：基于子类的代理，通过生成目标类的&lt;strong&gt;子类字节码&lt;/strong&gt;来实现，运行时生成子类。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-拦截目标对象&#34;&gt;2. 拦截目标对象
&lt;/h2&gt;&lt;p&gt;当用户调用目标对象的某个方法的时候,  将会被 AopProxy 的对象拦截, Spring 将所有的调用策略封装到了该对象&lt;/p&gt;
&lt;p&gt;​	AopProxy 有两种实现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JdkDynamicAopProxy&lt;/li&gt;
&lt;li&gt;ObjenesisCglibAopProxy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207145358713.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207145358713&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-调用代理对象阶段&#34;&gt;3. 调用代理对象阶段
&lt;/h2&gt;&lt;p&gt;Spring Aop 拦截器链中每个元素都会被命名为 MethodInterceptor,  ==其实就是切面中的 Advice 通知==, 被织入的代码片段, 会在这个阶段被执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拦截器链的典型结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设有以下增强：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个前置通知（&lt;code&gt;@Before&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;一个后置通知（&lt;code&gt;@After&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;一个环绕通知（&lt;code&gt;@Around&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==调用过程==&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;调用代理方法 -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  环绕通知（进入前） -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    前置通知 -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      调用目标方法 -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    后置通知 -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  环绕通知（退出后） -&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;返回结果
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;74-spring-bean的定义&#34;&gt;74. Spring Bean的定义
&lt;/h1&gt;&lt;p&gt;三个阶段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207152206194.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207152206194&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;class&lt;/strong&gt;：指定Bean的实现类。Spring容器会使用这个类来创建Bean实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scope&lt;/strong&gt;：定义Bean的作用域。常见的作用域包括单例（singleton）、原型（prototype）、会话（session）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lazy-init&lt;/strong&gt;：一个布尔值，用于指定Bean是否应该延迟初始化。如果设置为true，Bean在首次使用时才会被创建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;depends-on&lt;/strong&gt;：指定Bean在创建之前需要先创建的其他Bean。这用于处理Bean之间的依赖关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name 或 id&lt;/strong&gt;：Bean的名称或ID，&lt;strong&gt;用于在Spring容器中唯一标识一个Bean,并且不能以大写字母开头的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;constructor-arg&lt;/strong&gt;：没有无惨构造的话, 此属性是必须的, 用于指定构造函数参数，以便在创建Bean实例时传递给构造函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;properties&lt;/strong&gt;：用于设置Bean的属性值。这些属性值可以在Bean创建后通过setter方法设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init-method&lt;/strong&gt;：指定初始化方法，该方法在Bean创建并设置完所有属性后被调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy-method&lt;/strong&gt;：指定销毁方法，该方法在Bean即将从Spring容器中移除时被调用，用于执行清理工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;75-spring-bean的生命周期&#34;&gt;75. Spring Bean的生命周期
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207153726570.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207153726570&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt; 是 Spring 框架中的 &lt;strong&gt;核心接口&lt;/strong&gt;，它是 &lt;strong&gt;IOC 容器（Inversion of Control，控制反转容器）&lt;/strong&gt; 的==基础实现==，负责管理 Bean 的创建、初始化、生命周期和依赖注入等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Aware&lt;/code&gt; 接口是一组特定的接口，它们使得 Spring Bean 能够在初始化阶段获得 Spring 容器的某些核心功能。通过这些接口，Spring Bean 可以访问容器的一些关键组件或信息（如 &lt;code&gt;ApplicationContext&lt;/code&gt;、&lt;code&gt;BeanFactory&lt;/code&gt;、&lt;code&gt;Environment&lt;/code&gt; 等）&lt;/p&gt;
&lt;p&gt;假设我们有一个 &lt;code&gt;MyBean&lt;/code&gt; 类，它需要访问 &lt;code&gt;ApplicationContext&lt;/code&gt;。我们可以实现 &lt;code&gt;ApplicationContextAware&lt;/code&gt; 接口来实现这一点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ApplicationContextAware&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 通过实现 ApplicationContextAware 接口，注入 ApplicationContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeansException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;applicationContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;printBeanDefinitionNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 使用获取到的 ApplicationContext 打印 Bean 的定义&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;applicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBeanDefinitionNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Bean definitions in the context: &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanDefinitionNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;五个阶段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建前&lt;/li&gt;
&lt;li&gt;准备阶段&lt;/li&gt;
&lt;li&gt;创建实例阶段&lt;/li&gt;
&lt;li&gt;依赖注入阶段&lt;/li&gt;
&lt;li&gt;容器缓存阶段&lt;/li&gt;
&lt;li&gt;销毁实例阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactoryPostProcessor 有什么用? 和 BeanPostProcessor 有什么区别
&lt;ul&gt;
&lt;li&gt;BeanFactoryPostProcessor
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; 会在 &lt;strong&gt;Bean 实例化之前&lt;/strong&gt;执行，它是在 &lt;code&gt;BeanFactory&lt;/code&gt; 中的 &lt;code&gt;BeanDefinition&lt;/code&gt; 完成加载并且准备创建 Bean 之前执行的。&lt;/li&gt;
&lt;li&gt;它的执行顺序发生在 Spring 容器初始化阶段的早期，目标是修改容器中的 &lt;strong&gt;Bean 定义&lt;/strong&gt;，而不是 Bean 的实例&lt;/li&gt;
&lt;li&gt;修改 Bean 的配置，例如修改某个 Bean 的 &lt;code&gt;scope&lt;/code&gt;、&lt;code&gt;lazy&lt;/code&gt; 属性。&lt;/li&gt;
&lt;li&gt;在容器启动时调整 Bean 定义，以便动态改变容器的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BeanPostProcessor
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt; 会在 &lt;strong&gt;Bean 实例化之后&lt;/strong&gt;、&lt;strong&gt;初始化之前&lt;/strong&gt;、以及 &lt;strong&gt;初始化之后&lt;/strong&gt; 的不同阶段执行。&lt;/li&gt;
&lt;li&gt;为 Bean 添加一些功能（如 AOP 代理、日志记录、性能监控等）。&lt;/li&gt;
&lt;li&gt;修改 Bean 实例的属性、字段等（比如为某个 Bean 动态注入值）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207165915891.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207165915891&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dubbo 是怎么通过BeanPostProcessor 对Bean 进行拓展的
&lt;ul&gt;
&lt;li&gt;Dubbo 发现一个 &lt;code&gt;@Service&lt;/code&gt; 注解标记的 Bean 时，它会通过 &lt;code&gt;BeanPostProcessor&lt;/code&gt; 来增强该 Bean，把它暴露为一个 Dubbo 服务。&lt;/li&gt;
&lt;li&gt;Dubbo 发现一个 &lt;code&gt;@Reference&lt;/code&gt; 注解标记的 Bean 时，它会通过 &lt;code&gt;BeanPostProcessor&lt;/code&gt; 来动态创建该 Bean 的代理，代理后的 Bean 将会负责与 Dubbo 服务端进行远程调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-加载配置文件或注解&#34;&gt;&lt;strong&gt;1. 加载配置文件或注解&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;：Spring 通过 &lt;code&gt;BeanDefinitionReader&lt;/code&gt; 解析配置文件（如 XML）或注解（如 &lt;code&gt;@Configuration&lt;/code&gt;、&lt;code&gt;@Component&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：将每个 Bean 的定义（&lt;code&gt;BeanDefinition&lt;/code&gt;）加载到容器中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：左侧的 &lt;code&gt;BeanDefinition Reader&lt;/code&gt; 模块，解析了 XML 和注解，形成 &lt;code&gt;BeanDefinition&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-beandefinition-处理&#34;&gt;&lt;strong&gt;2. BeanDefinition 处理&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过程: Spring 使用 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;对 BeanDefinition进行修改或扩展。
&lt;ul&gt;
&lt;li&gt;==比如修改 Bean 的属性值，或注册新的 Bean==。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：在 Bean 实例化之前进行全局的配置调整。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; 模块，用于处理 &lt;code&gt;BeanDefinition&lt;/code&gt; 的相关信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-bean-实例化&#34;&gt;&lt;strong&gt;3. Bean 实例化&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;：Spring 容器通过反射，根据 &lt;code&gt;BeanDefinition&lt;/code&gt; 创建 Bean 的原始实例（未进行属性填充）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：将 Bean 加载到内存中，分配内存空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：右侧的 “实例化” 流程。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-属性填充&#34;&gt;&lt;strong&gt;4. 属性填充&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;过程: Spring 使用依赖注入（DI），将 Bean 所需的依赖注入到对象中。&lt;/p&gt;
&lt;p&gt;​	包括通过==构造方法、Setter 方法或字段注入依赖==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：完成 Bean 的依赖配置，确保它可以正常工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：初始化阶段中的 “填充属性”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-设置-aware-接口属性&#34;&gt;&lt;strong&gt;5. 设置 Aware 接口属性&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;：如果 Bean 实现了某些特殊接口（如 &lt;code&gt;BeanNameAware&lt;/code&gt;、&lt;code&gt;ApplicationContextAware&lt;/code&gt;），Spring 会调用这些方法，==传递容器相关的上下文信息==22。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：让 Bean 感知容器环境，比如 Bean 的名称或 &lt;code&gt;ApplicationContext&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：设置 Aware 接口的属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-调用-beanpostprocessor-的-postprocessbeforeinitialization&#34;&gt;&lt;strong&gt;6. 调用 BeanPostProcessor 的 &lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过程：Spring 调用所有注册的 BeanPostProcessor 的 &lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;方法，对 Bean 进行前置增强处理。
&lt;ul&gt;
&lt;li&gt;比如自定义一些逻辑，如动态修改 Bean 的某些属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：允许开发者在 Bean 初始化之前插入额外逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：&lt;code&gt;BeanPostProcessor#before&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-bean-初始化&#34;&gt;&lt;strong&gt;7. Bean 初始化&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过程：
&lt;ul&gt;
&lt;li&gt;如果 Bean 实现了 &lt;code&gt;InitializingBean&lt;/code&gt; 接口，会调用其 &lt;code&gt;afterPropertiesSet()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;如果在配置中指定了 &lt;code&gt;init-method&lt;/code&gt;，Spring 也会调用该方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：初始化 Bean，完成它的内部逻辑配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：&lt;code&gt;initializingBean#afterPropertiesSet&lt;/code&gt; 和 &lt;code&gt;执行init-method方法&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;8-调用-beanpostprocessor-的-postprocessafterinitialization&#34;&gt;&lt;strong&gt;8. 调用 BeanPostProcessor 的 &lt;code&gt;postProcessAfterInitialization&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过程：Spring 调用所有注册的 BeanPostProcessor 的 &lt;code&gt;postProcessAfterInitialization&lt;/code&gt;方法。
&lt;ul&gt;
&lt;li&gt;比如在这个阶段进行代理逻辑的实现（AOP）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：为 Bean 添加更多增强功能（如代理）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：&lt;code&gt;BeanPostProcessor#after&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-bean-完成初始化ready-to-use&#34;&gt;&lt;strong&gt;9. Bean 完成初始化（Ready to Use）&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;：Bean 已经完成所有初始化流程，Spring 容器将其标记为可用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：Bean 可以被其他组件调用或使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：完成对象 -&amp;gt; 添加到 &lt;code&gt;BeanFactory&lt;/code&gt; 的单例池中。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;10-销毁当容器关闭时&#34;&gt;&lt;strong&gt;10. 销毁（当容器关闭时）&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过程：
&lt;ul&gt;
&lt;li&gt;如果 Bean 实现了 &lt;code&gt;DisposableBean&lt;/code&gt; 接口，Spring 会调用其 &lt;code&gt;destroy()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;如果配置了 &lt;code&gt;destroy-method&lt;/code&gt;，Spring 也会执行该方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：清理资源，确保 Bean 的生命周期完整结束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图中位置&lt;/strong&gt;：此阶段未在图中标明，但与初始化的对称操作类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;76-spring-里面可以存在id-相同的两个bean吗&#34;&gt;76. Spring 里面可以存在Id 相同的两个Bean吗?
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;同一个配置文件不可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同的配置文件可以, ==后加载的会覆盖前面加载的==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ID 相同的 Bean 会导致冲突&lt;/strong&gt;，在 Spring 配置（XML 或注解）中不能直接定义多个 ID 相同的 Bean。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有多个 Bean 的 ID 相同，Spring 会根据注解或配置使用 &lt;strong&gt;&lt;code&gt;@Primary&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;@Qualifier&lt;/code&gt;&lt;/strong&gt; 来确定注入哪个 Bean。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;==&lt;code&gt;@Qualifier&lt;/code&gt; 注解来指定注入特定的 Bean 实例==。通过这种方式，你可以&lt;strong&gt;在同一个上下文中使用多个相同类型的 Bean，只要它们有不同的 &lt;code&gt;id&lt;/code&gt; 或 &lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多个相同类型 Bean 的 ID 冲突&lt;/strong&gt; 可能会抛出 &lt;code&gt;NoUniqueBeanDefinitionException&lt;/code&gt;，这时需要明确指定 Bean 的 ID 或使用 &lt;code&gt;@Qualifier&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/code&gt;&lt;/strong&gt; 类型的 Bean 虽然 ID 相同，但每次请求都会返回一个新的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;strong&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/strong&gt; 类时，==多个同名的 Bean 只会加载第一个==&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，Spring 要求 Bean 的 ID 必须是唯一的，只有在符合特定规则（如使用 &lt;code&gt;@Primary&lt;/code&gt;、&lt;code&gt;@Qualifier&lt;/code&gt;）的情况下，才能避免 ID 冲突问题。&lt;/p&gt;
&lt;h1 id=&#34;77-spring-如何解决循环依赖的问题&#34;&gt;77. Spring 如何解决循环依赖的问题
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;spring 循环依赖的问题是在Bean哪个生命周期的步骤中产生的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产生循环依赖的情况有哪些?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;互相依赖&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207185133717.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207185133717&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;间接依赖, 循环调用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207185224525.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207185224525&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一级缓存存放的是完全被初始化好的bean&lt;/li&gt;
&lt;li&gt;二级缓存, 存放原始Bean, 属性还没有被赋值, 没有被依赖注入&lt;/li&gt;
&lt;li&gt;三级缓存放的是 BeanFactory 对象, 用来生成原始Bean 对象并存放到二级缓存里面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决这个问题的==核心思想就是把bean的实例化和bean的属性依赖注入的这个过程给分离开来==&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241207192238559.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241207192238559&#34;
	
	
&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;步骤&lt;/th&gt;
          &lt;th&gt;操作描述&lt;/th&gt;
          &lt;th&gt;一级缓存（singletonObjects）&lt;/th&gt;
          &lt;th&gt;二级缓存（earlySingletonObjects）&lt;/th&gt;
          &lt;th&gt;三级缓存（singletonFactories）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;Spring 创建 Bean A，发现需要注入 B，进入创建 B  的流程。&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;A 的工厂方法进入三级缓存&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;创建 B，发现需要注入 A，检查是否存在已创建的  A。&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;A 的工厂方法存在&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;从三级缓存中获取 A 的工厂，并通过工厂方法生成早期的 A 半成品，加入二级缓存。&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;A 半成品&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;B 完成依赖注入（引用 A 的半成品）并初始化完成，放入一级缓存。&lt;/td&gt;
          &lt;td&gt;B&lt;/td&gt;
          &lt;td&gt;A 半成品&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;回到 A 的创建流程，发现 B  已完成注入，继续初始化 A  并完成创建，放入一级缓存。&lt;/td&gt;
          &lt;td&gt;B, A&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;spring本身只能解决单实例存在的循环引用问题&lt;/p&gt;
&lt;p&gt;以下四种情况需要人为干预&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多实例的 Setter 注入导致的循环依赖&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造器注入导致的循环依赖&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;==&lt;strong&gt;注解方式&lt;/strong&gt;：使用 &lt;code&gt;@Autowired&lt;/code&gt; 标注在构造器上。==&lt;/li&gt;
&lt;li&gt;使用构造器注入时，如果两个 Bean 相互依赖（&lt;code&gt;A&lt;/code&gt; 的构造器需要 &lt;code&gt;B&lt;/code&gt;，&lt;code&gt;B&lt;/code&gt; 的构造器又需要 &lt;code&gt;A&lt;/code&gt;），会导致循环依赖。&lt;/li&gt;
&lt;li&gt;==使用 &lt;code&gt;@Lazy&lt;/code&gt; 注解延迟初始化==。这样可以让某个依赖在实际需要时才加载，从而避免循环依赖。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@DependsOn&lt;/code&gt; 导致的循环依赖 ,  ==注解显式指定 Bean 的加载顺序时==，如果两个 Bean 的加载顺序互相依赖，可能导致循环依赖问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单例代理对象的 &lt;strong&gt;Setter 注入导致的循环依赖&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单例代理对象通过 Setter 注入另一个 Bean，而这个被注入的 Bean 又依赖于==代理对象==本身，会导致循环依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方式: 使用 &lt;code&gt;@Lazy&lt;/code&gt; 延迟加载，避免在 Bean 初始化阶段立即触发依赖。&lt;/p&gt;
&lt;p&gt;或者使用 &lt;code&gt;@DependsOn&lt;/code&gt; 注解，显式指定加载顺序，确保代理对象的依赖在正确的时机被加载&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-为什么必须要三级缓存&#34;&gt;1. 为什么必须要三级缓存
&lt;/h2&gt;&lt;p&gt;主要原因是 &lt;strong&gt;动态代理&lt;/strong&gt; 和 &lt;strong&gt;增强机制&lt;/strong&gt;。下面从几个关键点分析：&lt;/p&gt;
&lt;p&gt;二级缓存的局限性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果一个 ==&lt;strong&gt;Bean 在创建过程中需要进行动态代理（如 AOP 增强）&lt;/strong&gt;==，它的==最终实例不是原始对象，而是动态代理对象==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;==如果只用二级缓存（直接存储半成品对象），Spring 无法提前暴露代理后的对象，导致依赖的对象拿到的不是最终增强后的实例==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果检测到可能存在循环依赖，Spring 会将该 Bean 的 &amp;ldquo;早期引用&amp;rdquo; 放入三级缓存。&lt;/p&gt;
&lt;p&gt;这个&lt;strong&gt;早期引用是通过 &lt;code&gt;ObjectFactory&lt;/code&gt; 提供的，可以延迟加载。如果需要代理，这里生成的是代理对象&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;假设 &lt;code&gt;A&lt;/code&gt; 是需要动态代理的（如使用了 &lt;code&gt;@Transactional&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;在二级缓存中，&lt;code&gt;A&lt;/code&gt; 的原始对象被提前暴露给 &lt;code&gt;B&lt;/code&gt;，但 &lt;code&gt;B&lt;/code&gt; 需要的是增强后的代理对象。&lt;/li&gt;
&lt;li&gt;二级缓存只能存储原始对象，因此无法满足需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	通过 &lt;code&gt;ObjectFactory&lt;/code&gt; 延迟生成 Bean 的最终形式（如动态代理对象），确保注入的对象是完整可用的。&lt;/p&gt;
&lt;p&gt;必要性：==在支持动态代理、AOP 增强等场景时,三级缓存是解决循环依赖的关键机制==&lt;/p&gt;
&lt;h1 id=&#34;78-spring-beanfactory-和-factorybean的区别&#34;&gt;78. Spring BeanFactory 和 FactoryBean的区别
&lt;/h1&gt;&lt;p&gt;BeanFactory&amp;ndash; ==&lt;strong&gt;是容器本身,用来管理Bean生命周期和依赖注入&lt;/strong&gt;==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt; 是 Spring 的 &lt;strong&gt;IoC 容器&lt;/strong&gt;的核心接口，是 Spring 中用于管理和提供 Bean 的基础容器。&lt;/li&gt;
&lt;li&gt;它负责创建、管理和检索 Bean&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Factorybean  &lt;strong&gt;不是容器&lt;/strong&gt;，而是一个 Bean 类型。 用于&lt;strong&gt;定义复杂对象的创建逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现了 &lt;code&gt;FactoryBean&lt;/code&gt; 接口的类可以自定义生成某种对象。&lt;/li&gt;
&lt;li&gt;常见的使用场景是创建复杂对象，如动态代理、ORM 框架中的 SessionFactory 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二者的关系是：&lt;code&gt;BeanFactory&lt;/code&gt; 可以管理 &lt;code&gt;FactoryBean&lt;/code&gt;，并通过 &lt;code&gt;getObject()&lt;/code&gt; 方法返回 &lt;code&gt;FactoryBean&lt;/code&gt; 创建的对象。&lt;/p&gt;
&lt;h1 id=&#34;79-spring-事务&#34;&gt;79. Spring 事务
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_REQUIRED ，==默认==的spring事务传播级别，==如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行==。所以这个级别通常能满足处理大多数的业务场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_SUPPORTS ，==如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行==。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。应用场景较少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_MANDATORY（强制） ， ==该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！==配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用这个传播级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_REQUIRES_NEW ，==每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一个很有用的传播级别，举一个应用场景：现在有一个发送100个红包的操作，在发送之前，要做一些系统的初始化、验证、数据记录操作，然后发送100封红包，然后再记录发送日志，发送日志要求100%的准确，如果日志不准确，那么整个父事务逻辑需要回滚。
怎么处理整个业务需求呢？就是通过这个PROPAGATION_REQUIRES_NEW 级别的事务传播控制就可以完成。发送红包的子事务不会直接影响到父事务的提交和回滚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_NOT_SUPPORTED ，当前级别的特点就是&lt;strong&gt;上下文中存在事务&lt;/strong&gt;，==则挂起事务，执行当前逻辑，结束后恢复上下文的事务==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_NEVER ,  不允许当前方法在事务中运行 ，就抛出runtime异常，强制停止执行！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPAGATION_NESTED ，字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则==嵌套事务==执行，如果不存在事务，则新建事务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;还是子事务先提交，父事务再提交, 子事务是父事务的一部分，由父事务统一提交。&lt;/li&gt;
&lt;li&gt;回滚特性
&lt;ul&gt;
&lt;li&gt;主事务和嵌套事务属于同一个事务&lt;/li&gt;
&lt;li&gt;嵌套事务出错回滚不会影响到主事务&lt;/li&gt;
&lt;li&gt;主事务回滚会将嵌套事务一起回滚了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;require, 默认, 如果有则加入, 没有则新建&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;require_new, 新建事务&lt;/strong&gt;, 挂起上下文事务, 先执行自己的, 不会因为子事务异常回滚父事务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nested, 不存在会新建, 嵌套事务, 嵌套事务异常 ,主事务不会回滚, 主事务异常会全部回滚&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;support, 有则加入, 没有就非事务方式执行&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;not_support, 不支持, 有也不会执行事务&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;mandatory, 强制, 上下文中必须存在事务, 否则抛异常&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;never, 强制非事务执行, 有就抛异常&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;传播行为&lt;/th&gt;
          &lt;th&gt;当前有事务&lt;/th&gt;
          &lt;th&gt;当前无事务&lt;/th&gt;
          &lt;th&gt;应用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;REQUIRED&lt;/td&gt;
          &lt;td&gt;加入当前事务&lt;/td&gt;
          &lt;td&gt;新建事务&lt;/td&gt;
          &lt;td&gt;默认行为，绝大多数场景适用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SUPPORTS&lt;/td&gt;
          &lt;td&gt;加入当前事务&lt;/td&gt;
          &lt;td&gt;非事务方式运行&lt;/td&gt;
          &lt;td&gt;查询等对事务依赖不强的场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MANDATORY&lt;/td&gt;
          &lt;td&gt;加入当前事务&lt;/td&gt;
          &lt;td&gt;抛异常&lt;/td&gt;
          &lt;td&gt;必须在事务中运行的场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;REQUIRES_NEW&lt;/td&gt;
          &lt;td&gt;挂起当前事务，新建事务&lt;/td&gt;
          &lt;td&gt;新建事务&lt;/td&gt;
          &lt;td&gt;独立子事务，例如日志或补偿事务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOT_SUPPORTED&lt;/td&gt;
          &lt;td&gt;挂起当前事务，非事务运行&lt;/td&gt;
          &lt;td&gt;非事务方式运行&lt;/td&gt;
          &lt;td&gt;非事务操作，例如批量操作或查询&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NEVER&lt;/td&gt;
          &lt;td&gt;抛异常&lt;/td&gt;
          &lt;td&gt;非事务方式运行&lt;/td&gt;
          &lt;td&gt;明确不允许事务运行的场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NESTED&lt;/td&gt;
          &lt;td&gt;创建嵌套事务&lt;/td&gt;
          &lt;td&gt;新建事务&lt;/td&gt;
          &lt;td&gt;子事务与父事务部分独立且可单独回滚的场景&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;80-spring-bean注入ioc容器的方式&#34;&gt;80. Spring Bean注入IOC容器的方式
&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;注入方式&lt;/th&gt;
          &lt;th&gt;特点&lt;/th&gt;
          &lt;th&gt;适用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;注解（@Component）&lt;/td&gt;
          &lt;td&gt;简洁高效，自动扫描管理&lt;/td&gt;
          &lt;td&gt;大部分场景，特别是简单项目&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Java 配置（@Bean）&lt;/td&gt;
          &lt;td&gt;灵活、可定制&lt;/td&gt;
          &lt;td&gt;需要复杂创建逻辑或条件注入&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;XML 配置&lt;/td&gt;
          &lt;td&gt;可配置性强，但冗长&lt;/td&gt;
          &lt;td&gt;早期项目或对注解不支持的环境&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FactoryBean&lt;/td&gt;
          &lt;td&gt;动态创建复杂 Bean&lt;/td&gt;
          &lt;td&gt;需要创建动态或代理对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;@Conditional&lt;/td&gt;
          &lt;td&gt;条件化注入&lt;/td&gt;
          &lt;td&gt;环境依赖、动态注入场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;@Profile&lt;/td&gt;
          &lt;td&gt;基于环境配置&lt;/td&gt;
          &lt;td&gt;多环境切换（如开发、生产）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态注册&lt;/td&gt;
          &lt;td&gt;编程式，灵活&lt;/td&gt;
          &lt;td&gt;特殊场景，如运行时动态加载 Bean&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;使用XML&lt;/li&gt;
&lt;li&gt;使用@CompontScan 注解 扫描 @Controller&lt;/li&gt;
&lt;li&gt;@Configuration 声明配置类, @Bean 实现Bean 定义, 这种方式是 Xml 配置的一种演变&lt;/li&gt;
&lt;li&gt;@Import 注解, 导入配置类或者普通的bean&lt;/li&gt;
&lt;li&gt;FactoryBean 工厂Bean, 动态构建Bean 实例, Spring cloud open feign 里的 &lt;strong&gt;动态代理实例&lt;/strong&gt;, 就是基于它&lt;/li&gt;
&lt;li&gt;实现 ImportSelector 接口, Spring boot starter自动装配的时候有用到&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;81-过滤器和拦截器的区别&#34;&gt;81. 过滤器和拦截器的区别
&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;过滤器（Filter）&lt;/th&gt;
          &lt;th&gt;拦截器（Interceptor）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;依赖规范&lt;/td&gt;
          &lt;td&gt;Java EE 规范的一部分，==&lt;strong&gt;依赖 Servlet API&lt;/strong&gt;==。&lt;/td&gt;
          &lt;td&gt;Spring 或其他框架的扩展机制，==依赖 Spring 容器==。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;作用范围&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;全局 HTTP 请求和响应。&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Spring MVC 层（控制器及之后的逻辑层）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;触发时机&lt;/td&gt;
          &lt;td&gt;Servlet 执行前后。&lt;/td&gt;
          &lt;td&gt;控制器方法执行前后，以及请求完成之后。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;访问能力&lt;/td&gt;
          &lt;td&gt;无法直接访问 Controller、Service 的信息。&lt;/td&gt;
          &lt;td&gt;可以访问 Controller 的上下文和业务逻辑层的返回值。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;运行顺序不同：过滤器在 Servlet 容器接收到请求后、Servlet 被调用前运行；拦截器在 Servlet 被调用后、响应发送到客户端前运行。&lt;/li&gt;
&lt;li&gt;依赖关系不同：过滤器依赖 Servlet 容器；拦截器不依赖 Servlet 容器。&lt;/li&gt;
&lt;li&gt;操作对象不同：过滤器只能对 request 和 response 操作；拦截器可对 request、response、handle、model and view、exception 操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;82-spring-mvc-执行流程&#34;&gt;82. Spring Mvc 执行流程
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241208144250849.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241208144250849&#34;
	
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;客户端请求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;DispatcherServlet(前端控制器)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;作为中央调度器，负责将请求分发到具体的处理组件。 HttpServletRequest 和 HttpServletResponse 对象通常是由 Web 容器在请求到达 DispatcherServlet 时自动创建的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;HandlerMapping&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;→ 查找合适的 Controller&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;HandlerAdapter&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;→ 反射调用 Controller 方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;Controller&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;返回 ModelAndView 或 视图名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ViewResolver&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;→视图解析器, 解析视图名，找到具体视图&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;渲染视图&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;→ 返回 HTML 或其他格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;客户端接收响应，渲染页面&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;83-spring-ioc-原理&#34;&gt;83. Spring IOC 原理
&lt;/h1&gt;&lt;p&gt;Spring IoC 的核心原理就是**通过容器管理 Bean 的生命周期、依赖关系和初始化过程。**容器通过依赖注入来==解耦各个 Bean 之间的关系，减少了类与类之间的紧耦合，提高了应用程序的可维护性和扩展性==。整个过程依赖于反射、工厂模式、策略模式等设计模式。&lt;/p&gt;
&lt;p&gt;通过 IoC 和 DI，Spring 实现了松耦合的编程模型，使得 Bean 的创建和管理交由容器负责，开发人员只需关注业务逻辑。&lt;/p&gt;
&lt;p&gt;IoC 控制反转 是==将对象的管理责任交给容器，而非由程序显式地管理==。&lt;/p&gt;
&lt;p&gt;DI 依赖注入 , 将类的依赖（通常是其他类的实例）注入到目标类中 ,  ==构造器注入、Setter 方法注入和字段注入==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt;：最基础的容器，通常用于轻量级的应用。&lt;code&gt;BeanFactory&lt;/code&gt; 负责 Bean 的创建和管理，但其不处理任何 Bean 的生命周期管理和事件机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ApplicationContext&lt;/strong&gt;：是 &lt;code&gt;BeanFactory&lt;/code&gt; 的==子接口，扩展了更多功能（例如事件传播、AOP 支持、国际化等）==。&lt;code&gt;ApplicationContext&lt;/code&gt; 是 &lt;strong&gt;Spring 最常用的容器&lt;/strong&gt;，具有更加丰富的功能。&lt;/p&gt;
&lt;h1 id=&#34;84-spring-mvc的理解&#34;&gt;84. Spring Mvc的理解
&lt;/h1&gt;&lt;p&gt;本质上是一个web框架, 基于servlet, servlet 是一个基础的技术规范, 提供了处理请求和响应的基本能力, mvc 在 此基础上进行了扩展，封装了&lt;strong&gt;请求分发、处理和响应的流程&lt;/strong&gt;，通过 &lt;code&gt;DispatcherServlet&lt;/code&gt; 来管理请求的流转和控制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把传统MVC框架做了拆分
&lt;ul&gt;
&lt;li&gt;前端控制器 DispatcherServlet&lt;/li&gt;
&lt;li&gt;后端控制器 Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model 模型 拆分,  Model 是负责应用程序的数据和业务逻辑。
&lt;ul&gt;
&lt;li&gt;业务层service&lt;/li&gt;
&lt;li&gt;数据访问层 Repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;85-spring-bean-作用域&#34;&gt;85. Spring Bean 作用域
&lt;/h1&gt;&lt;p&gt;作用域的主要作用是==保护bean的使用安全==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：常见于服务层 Bean、工具类、数据库连接池等需要全局共享的 Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：内存占用小，性能好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：所有请求共享同一个实例，可能导致线程安全问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Prototype&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：适用于每次操作需要一个新的实例的情况，例如处理不同用户的请求时，每次都需要一个新的 Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：能够为每次请求创建独立的 Bean 实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：可能增加性能开销，因为每次都会创建新的实例，且 &lt;strong&gt;Spring 容器不会管理其生命周期&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：用于 Web 应用程序中，每次请求需要一个新的 Bean 实例，适合于请求级别的状态管理（如分页信息、表单提交数据等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;strong&gt;Bean 在请求结束后会被销毁，有效隔离了不同请求的数据。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：仅适用于 Web 环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Session&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：用于 Web 应用程序中，每个用户会话需要一个独立的 Bean 实例，适合于保存用户的会话状态（如购物车、用户登录信息等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：可以跨多个请求保持用户的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：会话结束后，Bean 会被销毁。如果会话过多，可能导致内存压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：用于 Web 应用程序中跨整个应用共享的 Bean，比如缓存、全局配置等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：适用于全局共享的数据和资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：如果 Bean 状态被修改，可能会影响到应用的其他部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：适用于 WebSocket 连接中的 Bean 状态管理，支持为每个 WebSocket 连接创建独立的 Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：能够保持 WebSocket 会话的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：仅适用于 WebSocket 环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241208161125459.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241208161125459&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;86-webapplicationcontext-和-applicationcontext&#34;&gt;86. WebApplicationContext 和 ApplicationContext
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;WebApplicationContext&lt;/code&gt;&lt;/strong&gt; 是 &lt;code&gt;ApplicationContext&lt;/code&gt; 的==&lt;strong&gt;子接口&lt;/strong&gt;==，专门为 Web 环境设计，扩展了 &lt;code&gt;ApplicationContext&lt;/code&gt; 提供的功能，增加了 Web 环境的支持（如 HTTP 请求、会话管理等）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt; 是通用的 Spring 容器接口，适用于非 Web 环境，而 &lt;code&gt;WebApplicationContext&lt;/code&gt; 则是基于 Web 环境的一种实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;87-seata&#34;&gt;87. Seata
&lt;/h1&gt;&lt;p&gt;见seata文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持的模式有 AT, TCC, SAGA 长事务&lt;/li&gt;
&lt;li&gt;可以无侵入的实现事务控制, 代理的 DataSource&lt;/li&gt;
&lt;li&gt;AT 模式的流程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241208172933247.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241208172933247&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;88-dubbo请求失败重试&#34;&gt;88. Dubbo请求失败重试
&lt;/h1&gt;&lt;p&gt;默认是会进行多两次的重试的&lt;/p&gt;
&lt;p&gt;dubbo 是 rpc 框架, 衍生的能力有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态路由&lt;/li&gt;
&lt;li&gt;容错重试&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集群容错策略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Failover Cluster（默认，失败自动切换）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用失败后，切换到其他节点重试。&lt;/li&gt;
&lt;li&gt;配合 &lt;code&gt;retries&lt;/code&gt; 参数，控制总调用次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Failfast Cluster（快速失败）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次调用失败即返回错误，不进行重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Failsafe Cluster（失败安全）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用失败直接忽略，不抛出异常（适用于日志等非关键操作）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Failback Cluster（失败自动恢复）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==调用失败后，异步记录并定期重试==。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Forking Cluster（并行调用）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行调用多个节点，只要一个成功即返回。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无重试逻辑&lt;/strong&gt;，但可以通过并行多调用实现类似效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;89-redis和mysql-如何保持数据一致&#34;&gt;89. redis和mysql 如何保持数据一致
&lt;/h1&gt;&lt;p&gt;==问题产生的根源==&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;redis和mysql 数据不一致
&lt;ol&gt;
&lt;li&gt;缓存被提前删除,更新&lt;/li&gt;
&lt;li&gt;缓存失效和创建时机不对&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;并发操作, 多个线程同时修改数据&lt;/li&gt;
&lt;li&gt;网络或服务异常, 更新数据库或缓存失败&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cache Aside 模式（常用）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;缓存和数据库的更新分开操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读操作：先读缓存，如果缓存没有数据（缓存穿透），则查询数据库并将结果写入缓存。&lt;/li&gt;
&lt;li&gt;写操作：先更新数据库，再删除缓存（推荐）。&lt;/li&gt;
&lt;li&gt;优点: 简单易用&lt;/li&gt;
&lt;li&gt;缺点: 会有短暂的数据不一致的问题, 更新完数据库后还没来得及更新缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Write Through 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;数据写入操作先更新缓存,再更新数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点: 缓存数据库实时同步&lt;/li&gt;
&lt;li&gt;缺点: 写操作延迟高, ==适用读多写少的场景==&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Read Through 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;先找缓存, 没有就找数据库并更新缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Write Behind 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;先更新缓存, 再异步刷新数据库&lt;/p&gt;
&lt;p&gt;优点: 提高写性能&lt;/p&gt;
&lt;p&gt;缺点: 数据不一致的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;90-spring-cloud-理解&#34;&gt;90. Spring cloud 理解
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;微服务的一套标准&lt;/strong&gt;, 提供一些解决方案, 降低了微服务架构的开发难度, 只用在spring-boot 中引入相关的starter 就可以集成相关的组件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ribbon 负载均衡&lt;/p&gt;
&lt;p&gt;Gateway 网关&lt;/p&gt;
&lt;p&gt;Hystrix 服务熔断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;alibaba&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dubbo&lt;/p&gt;
&lt;p&gt;nacos 配置中心, 注册中心&lt;/p&gt;
&lt;p&gt;sentinel 限流和降级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;91-rpc-和-http&#34;&gt;91. Rpc 和 Http
&lt;/h1&gt;&lt;p&gt;rpc ==不是通信协议, 是一个远程过程调用协议==, 是方便开发人员在对远程方法进行调用的时候就像调用本地方法一样, rpc 里面服务之间的通信协议可以是http, 也可以是tcp, 或者是自定义的协议&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241209165439649.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241209165439649&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;http 是通信协议, 基于Tcp协议&lt;/p&gt;
&lt;p&gt;什么是序列化和反序列化&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;序列化是为了解决网络传输过程中, 对象通信的问题, ==序列化就是把对象转化为字节流==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反序列化就是从网络上获取对象的字节流, 重新构建一个新的对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;92-一致性hash算法&#34;&gt;92. 一致性Hash算法
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;分布式系统中常用的**负载均衡和数据分布算法**。它通过**将数据分布到多个节点上，减少节点增删时数据迁移的范围，从而提高系统的可扩展性和稳定性**。 redis 里面就有用到
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;基本原理&#34;&gt;&lt;strong&gt;基本原理&lt;/strong&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;哈希环&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一致性哈希将整个哈希值空间（例如 &lt;code&gt;0 ~ 2^32-1&lt;/code&gt;）抽象为一个&lt;strong&gt;环状结构&lt;/strong&gt;，称为哈希环。&lt;/li&gt;
&lt;li&gt;环的起点和终点相连，形成一个闭合的哈希空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点映射到环上&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过哈希函数（如 &lt;code&gt;Hash(nodeId)&lt;/code&gt;），将节点映射到哈希环上的某个点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这些点代表物理节点或服务器&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据映射到环上&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过哈希函数（如 &lt;code&gt;Hash(dataKey)&lt;/code&gt;），将数据键映射到哈希环上的某个点。&lt;/li&gt;
&lt;li&gt;数据分配规则：数据存储在&lt;strong&gt;顺时针方向的第一个节点&lt;/strong&gt;上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;传统哈希缺点&#34;&gt;&lt;strong&gt;传统哈希缺点&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果节点数量发生变化（增减节点），所有的数据需要重新计算哈希值并迁移到新节点，成本高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一致性哈希改进&#34;&gt;&lt;strong&gt;一致性哈希改进&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当节点增加或减少时，只影响哈希环上&lt;strong&gt;相邻的一小部分数据&lt;/strong&gt;，不会影响整个系统。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新增节点&lt;/strong&gt;：数据只从新节点的顺时针后继节点迁移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移除节点&lt;/strong&gt;：数据只从被移除节点迁移到其顺时针后继节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;93-分布式和微服务的理解&#34;&gt;93. 分布式和微服务的理解
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;是把一个大系统拆分到多个机器上运行，解决性能瓶颈和高可用问题，重点是&lt;strong&gt;让多台机器协作完成一个任务&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务架构&lt;/strong&gt;是把一个大应用拆成多个小服务，每个服务独立负责一个功能，重点是&lt;strong&gt;按业务模块解耦&lt;/strong&gt;，并且可以通过分布式技术来部署。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;区别&lt;/strong&gt;：分布式更关注系统架构层面，微服务更关注业务功能划分。
&lt;strong&gt;关系&lt;/strong&gt;：微服务通常基于分布式技术实现，但分布式不一定是微服务。&lt;/p&gt;
&lt;h1 id=&#34;94-nacos-配置更新流程&#34;&gt;94. Nacos 配置更新流程
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Nacos 采用的是长轮训的方式向Nacos Server 端去发起配置更新的查询
&lt;ul&gt;
&lt;li&gt;长轮训就是客户端发起一次轮训请求到服务端, 当服务器端的配置==没有任何的变动的时候, 连接会一直的打开==, 当配置更新或者连接超时之后进行返回&lt;/li&gt;
&lt;li&gt;客户端把需要去进行比较的==配置会进行分片,3000个配置一个分片==&lt;/li&gt;
&lt;li&gt;客户端会 分包进行比较和更新,
&lt;ul&gt;
&lt;li&gt;3000个配置key, value 拼接的字符串进行MD5 比较&lt;/li&gt;
&lt;li&gt;服务端会逐个比较, 把存在更新的key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nacos 既支持 CP（一致性）模型，也支持 AP（可用性）模型。具体来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AP 模型&lt;/strong&gt;：Nacos 默认采用 AP 模型，即在网络分区的情况下，优先保证系统的可用性，而不是一致性。这意味着在网络分区时，Nacos 仍然可以对外提供服务，但可能会出现数据不一致的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CP 模型&lt;/strong&gt;：Nacos 也支持 CP 模型，即在网络分区的情况下，优先保证数据的一致性，而不是可用性。这意味着在网络分区时，Nacos 可能会暂时无法对外提供服务，直到网络恢复并达到一致性&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;95-分布式id设计方案&#34;&gt;95. 分布式ID设计方案
&lt;/h1&gt;&lt;p&gt;需要考虑因素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序性, 在Mysql B+数的存储结构中, 范围查询的效率更高, B+树数据的维护效率更高&lt;/li&gt;
&lt;li&gt;安全性, 反爬&lt;/li&gt;
&lt;li&gt;可用性要高, 如果出现问题会导致大部分业务不可用&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常用的是 雪花id, 64位长度组成的, 区域划分&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241210150428196.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241210150428196&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;97-nosql&#34;&gt;97. Nosql
&lt;/h1&gt;&lt;p&gt;Nacos 既支持 CP（一致性）模型，也支持 AP（可用性）模型。具体来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AP 模型&lt;/strong&gt;：Nacos 默认采用 AP 模型，即在网络分区的情况下，优先保证系统的可用性，而不是一致性。这意味着在网络分区时，Nacos 仍然可以对外提供服务，但可能会出现数据不一致的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CP 模型&lt;/strong&gt;：Nacos 也支持 CP 模型，即在网络分区的情况下，优先保证数据的一致性，而不是可用性。这意味着在网络分区时，Nacos 可能会暂时无法对外提供服务，直到网络恢复并达到一致性&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;98-分布式锁&#34;&gt;98. 分布式锁
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用分布式锁是因为在同一个时间, 多个服务之间有多个线程去争抢同一个资源所造成的线程安全的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;==redis==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 setNx, &lt;strong&gt;如果不存在就设置&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用redission, 他提供了&lt;strong&gt;分布式锁的封装&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;红锁（RedLock）是什么？  &lt;strong&gt;确保锁在多个 Redis 节点上获取到，避免单点故障带来的问题。&lt;/strong&gt;  &lt;strong&gt;如果仅在一个 Redis 节点上加锁，Redis 节点宕机后，锁就失效了。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;strong&gt;分布式系统&lt;/strong&gt;中，多个 Redis 节点会部署在不同的服务器上。&lt;/p&gt;
&lt;p&gt;当需要实现一个全局唯一的分布式锁（如协调多个服务同时对一个资源操作），就需要一种机制来&lt;strong&gt;在多个节点上保证锁的一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;红锁是 Redis 提供的一种分布式锁算法，适用于集群模式和多节点部署场景。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==zookeeper==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用同一个节点的唯一性或者有序节点, 这样的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;99-时间轮算法&#34;&gt;99. 时间轮算法
&lt;/h1&gt;&lt;h2 id=&#34;概念&#34;&gt;概念
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间轮&lt;/strong&gt;：一个轮状结构，可以想象成时钟的“表盘”，每一格是一个槽。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间槽（Slot）&lt;/strong&gt;：时间轮中的每个区域，代表一个单位时间（比如1秒、1分钟等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针（Pointer）&lt;/strong&gt;：轮子的指针表示当前的时间，随着时间流逝不断向前移动，指向下一个时间槽。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时间轮的工作流程&#34;&gt;时间轮的工作流程
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;时间轮的结构&lt;/strong&gt;： 时间轮由一个固定大小的槽数组（Slot array）构成，每个槽代表一个时间单位（比如1秒、1分钟等）。每个槽可以存放一个定时任务队列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定时任务的加入&lt;/strong&gt;： 当一个定时任务需要执行时，系统会根据任务的执行时间（延时）计算出应该放置在时间轮的哪个槽中。任务会被放入对应的槽队列中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间轮的转动&lt;/strong&gt;： 每当轮子“走一步”时，时间轮指针就会移动到下一个槽。当指针指向某个槽时，如果该槽内有定时任务，系统就会执行这些任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务的执行&lt;/strong&gt;： 如果指针指向的槽内有任务，系统会将这些任务取出并执行。每次执行后，指针继续前进。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务的超时处理&lt;/strong&gt;： 时间轮的每一圈就是一个时间周期，指针每移动一步，表示时间的流逝。如果任务已经到达它的执行时间，它就会被触发执行。如果任务还没有到时间，它会留在该时间槽中等待下一次轮转。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;100-令牌桶-漏桶&#34;&gt;100. 令牌桶, 漏桶
&lt;/h1&gt;&lt;p&gt;==令牌桶==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统以固定速率向桶中添加令牌（单位时间生成一定数量的令牌），代表系统的处理能力。&lt;/li&gt;
&lt;li&gt;桶的容量是固定的，&lt;strong&gt;超过容量的新令牌会被丢弃&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;==请求处理方式==:  每次请求到来时，系统从桶中取出一个或多个令牌。如果桶中有足够的令牌，则请求被处理；否则，请求被拒绝或延迟处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==漏桶==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟一个有固定容量的漏桶（如水桶）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桶内的水（请求）以固定速率流出&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==请求处理方式==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果桶未满，请求被放入桶中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果桶已满，新的请求将被丢弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论请求到达的速率如何，桶中的内容都会以固定速率“漏出”（处理）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;令牌桶&lt;/th&gt;
          &lt;th&gt;漏桶&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;突发流量处理&lt;/td&gt;
          &lt;td&gt;支持&lt;/td&gt;
          &lt;td&gt;不支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;实现方式&lt;/td&gt;
          &lt;td&gt;通过生成令牌控制流量&lt;/td&gt;
          &lt;td&gt;通过固定速率漏水控制流量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;限流行为&lt;/td&gt;
          &lt;td&gt;限制平均速率，允许短时突发流量&lt;/td&gt;
          &lt;td&gt;限制恒定速率，平滑输出流量&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;101-滑动窗口算法&#34;&gt;101. 滑动窗口算法
&lt;/h1&gt;&lt;p&gt;滑动窗口的核心在于维护一个窗口（范围），并在窗口中动态调整以找到目标解。窗口的范围可以通过起点和终点两个指针表示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;窗口左端点&lt;/strong&gt;：表示当前子区间的起始位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;窗口右端点&lt;/strong&gt;：表示当前子区间的结束位置。&lt;/p&gt;
&lt;p&gt;通过移动左端点和右端点，可以动态调整窗口的大小和位置，&lt;strong&gt;从而在数据结构中进行遍历和筛选&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/images/image-20241211172332803.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241211172332803&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来解决数组的统计问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;102&#34;&gt;102.
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>Chinese Test</title>
        <link>https://mikeLing-qx.github.io/p/test-chinese/</link>
        <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/test-chinese/</guid>
        <description>&lt;img src="https://mikeLing-qx.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" alt="Featured image of post Chinese Test" /&gt;&lt;h2 id=&#34;正文测试&#34;&gt;正文测试
&lt;/h2&gt;&lt;p&gt;而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。&lt;/p&gt;
&lt;p&gt;奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。&lt;/p&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;思念是最暖的忧伤像一双翅膀&lt;br&gt;
让我停不了飞不远在过往游荡&lt;br&gt;
不告而别的你 就算为了我着想&lt;br&gt;
这么沉痛的呵护 我怎么能翱翔&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=3aypp_YlBzI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最暖的憂傷 - 田馥甄&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;图片&#34;&gt;图片
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash.jpg&#34;
	width=&#34;667&#34;
	height=&#34;1000&#34;
	srcset=&#34;https://mikeLing-qx.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu13768363498926278726.jpg 480w, https://mikeLing-qx.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu13380208884366868750.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Florian Klauer on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;  &lt;img src=&#34;https://mikeLing-qx.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;667&#34;
	srcset=&#34;https://mikeLing-qx.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu1712544344331247820.jpg 480w, https://mikeLing-qx.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu12475395149584884402.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Luca Bravo on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mikeLing-qx.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;750&#34;
	srcset=&#34;https://mikeLing-qx.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu8363585391189779282.jpg 480w, https://mikeLing-qx.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu15102473124145023839.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Helena Hertz on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;https://mikeLing-qx.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash.jpg&#34;
	width=&#34;667&#34;
	height=&#34;1000&#34;
	srcset=&#34;https://mikeLing-qx.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hu15886963791847885497.jpg 480w, https://mikeLing-qx.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hu11726476772237334826.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Hudai Gayiran on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![&lt;span class=&#34;nt&#34;&gt;Photo by Florian Klauer on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;florian-klauer-nptLmg6jqDo-unsplash.jpg&lt;/span&gt;)  ![&lt;span class=&#34;nt&#34;&gt;Photo by Luca Bravo on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;luca-bravo-alS7ewQ41M8-unsplash.jpg&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![&lt;span class=&#34;nt&#34;&gt;Photo by Helena Hertz on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;helena-hertz-wWZzXlDpMog-unsplash.jpg&lt;/span&gt;)  ![&lt;span class=&#34;nt&#34;&gt;Photo by Hudai Gayiran on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;hudai-gayiran-3Od_VKcDEAA-unsplash.jpg&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;相册语法来自 &lt;a class=&#34;link&#34; href=&#34;https://typlog.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Typlog&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Markdown Syntax Guide</title>
        <link>https://mikeLing-qx.github.io/p/markdown-syntax-guide/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/markdown-syntax-guide/</guid>
        <description>&lt;img src="https://mikeLing-qx.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" /&gt;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings
&lt;/h2&gt;&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1
&lt;/h1&gt;&lt;h2 id=&#34;h2&#34;&gt;H2
&lt;/h2&gt;&lt;h3 id=&#34;h3&#34;&gt;H3
&lt;/h3&gt;&lt;h4 id=&#34;h4&#34;&gt;H4
&lt;/h4&gt;&lt;h5 id=&#34;h5&#34;&gt;H5
&lt;/h5&gt;&lt;h6 id=&#34;h6&#34;&gt;H6
&lt;/h6&gt;&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph
&lt;/h2&gt;&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes
&lt;/h2&gt;&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables
&lt;/h2&gt;&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Age&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Bob&lt;/td&gt;
          &lt;td&gt;27&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Alice&lt;/td&gt;
          &lt;td&gt;23&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Italics&lt;/th&gt;
          &lt;th&gt;Bold&lt;/th&gt;
          &lt;th&gt;Code&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&lt;/th&gt;
          &lt;th&gt;B&lt;/th&gt;
          &lt;th&gt;C&lt;/th&gt;
          &lt;th&gt;D&lt;/th&gt;
          &lt;th&gt;E&lt;/th&gt;
          &lt;th&gt;F&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td&gt;
          &lt;td&gt;Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td&gt;
          &lt;td&gt;Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td&gt;
          &lt;td&gt;Proin sit amet velit nec enim imperdiet vehicula.&lt;/td&gt;
          &lt;td&gt;Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td&gt;
          &lt;td&gt;Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks
&lt;/h2&gt;&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces
&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;diff-code-block&#34;&gt;Diff code block
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[dependencies.bevy]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;list-types&#34;&gt;List Types
&lt;/h2&gt;&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark
&lt;/h2&gt;&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;ALT&lt;/kbd&gt; + &lt;kbd&gt;Delete&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;h2 id=&#34;hyperlinked-image&#34;&gt;Hyperlinked image
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Google&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Placeholder Text</title>
        <link>https://mikeLing-qx.github.io/p/placeholder-text/</link>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/placeholder-text/</guid>
        <description>&lt;img src="https://mikeLing-qx.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post Placeholder Text" /&gt;&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;
&lt;p&gt;Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exierant elisi ambit vivere dedere&lt;/li&gt;
&lt;li&gt;Duce pollice&lt;/li&gt;
&lt;li&gt;Eris modo&lt;/li&gt;
&lt;li&gt;Spargitque ferrea quos palude&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comas hunc haec pietate fetum procerum dixit&lt;/li&gt;
&lt;li&gt;Post torum vates letum Tiresia&lt;/li&gt;
&lt;li&gt;Flumen querellas&lt;/li&gt;
&lt;li&gt;Arcanaque montibus omnes&lt;/li&gt;
&lt;li&gt;Quidem et&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;vagus-elidunt&#34;&gt;Vagus elidunt
&lt;/h1&gt;&lt;p&gt;&lt;svg class=&#34;canon&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; overflow=&#34;visible&#34; viewBox=&#34;0 0 496 373&#34; height=&#34;373&#34; width=&#34;496&#34;&gt;&lt;g fill=&#34;none&#34;&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#ED1C24&#34; stroke-width=&#34;.75&#34; d=&#34;M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.479.375h495v372h-495zM247.979.875v372&#34;&gt;&lt;/path&gt;&lt;ellipse cx=&#34;498.729&#34; cy=&#34;177.625&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;ellipse cx=&#34;247.229&#34; cy=&#34;377.375&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Van de Graaf Canon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mane-refeci-capiebant-unda-mulcebat&#34;&gt;Mane refeci capiebant unda mulcebat
&lt;/h2&gt;&lt;p&gt;Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong&gt;Faces illo pepulere&lt;/strong&gt; tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p&gt;
&lt;p&gt;Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p&gt;
&lt;p&gt;Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong&gt;mitis temploque&lt;/strong&gt; vocatus, inque alis, &lt;em&gt;oculos nomen&lt;/em&gt; non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong&gt;parte&lt;/strong&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Math Typesetting</title>
        <link>https://mikeLing-qx.github.io/p/math-typesetting/</link>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/math-typesetting/</guid>
        <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;
&lt;p&gt;In this example we will be using &lt;a class=&#34;link&#34; href=&#34;https://katex.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KaTeX&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a partial under &lt;code&gt;/layouts/partials/math.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Within this partial reference the &lt;a class=&#34;link&#34; href=&#34;https://katex.org/docs/autorender.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Auto-render Extension&lt;/a&gt; or host these scripts locally.&lt;/li&gt;
&lt;li&gt;Include the partial in your templates like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; or .Params.math .Site.Params.math &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; partial &lt;span class=&#34;s2&#34;&gt;&amp;#34;math.html&amp;#34;&lt;/span&gt; . &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; end &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To enable KaTeX globally set the parameter &lt;code&gt;math&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in a project&amp;rsquo;s configuration&lt;/li&gt;
&lt;li&gt;To enable KaTeX on a per page basis include the parameter &lt;code&gt;math: true&lt;/code&gt; in content files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use the online reference of &lt;a class=&#34;link&#34; href=&#34;https://katex.org/docs/supported.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Supported TeX Functions&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples
&lt;/h3&gt;&lt;p&gt;Inline math: $\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$&lt;/p&gt;
$$
 \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } 
$$</description>
        </item>
        <item>
        <title>Emoji Support</title>
        <link>https://mikeLing-qx.github.io/p/emoji-support/</link>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://mikeLing-qx.github.io/p/emoji-support/</guid>
        <description>&lt;img src="https://mikeLing-qx.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" /&gt;&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/functions/emojify/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙈&lt;/span&gt; &lt;code&gt;:see_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙉&lt;/span&gt; &lt;code&gt;:hear_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙊&lt;/span&gt; &lt;code&gt;:speak_no_evil:&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;http://www.emoji-cheat-sheet.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Emoji cheat sheet&lt;/a&gt; is a useful reference for emoji shorthand codes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.emoji {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
